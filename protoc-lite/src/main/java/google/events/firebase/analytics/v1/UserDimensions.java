// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/analytics/v1/data.proto

package google.events.firebase.analytics.v1;

/**
 * <pre>
 * Message containing information about the user associated with the event.
 * </pre>
 *
 * Protobuf type {@code google.events.firebase.analytics.v1.UserDimensions}
 */
public  final class UserDimensions extends
    com.google.protobuf.GeneratedMessageLite<
        UserDimensions, UserDimensions.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.firebase.analytics.v1.UserDimensions)
    UserDimensionsOrBuilder {
  private UserDimensions() {
    userId_ = "";
  }
  public static final int USER_ID_FIELD_NUMBER = 1;
  private java.lang.String userId_;
  /**
   * <pre>
   * The user ID set via the setUserId API.
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @return The userId.
   */
  @java.lang.Override
  public java.lang.String getUserId() {
    return userId_;
  }
  /**
   * <pre>
   * The user ID set via the setUserId API.
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @return The bytes for userId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUserIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(userId_);
  }
  /**
   * <pre>
   * The user ID set via the setUserId API.
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @param value The userId to set.
   */
  private void setUserId(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    userId_ = value;
  }
  /**
   * <pre>
   * The user ID set via the setUserId API.
   * </pre>
   *
   * <code>string user_id = 1;</code>
   */
  private void clearUserId() {
    
    userId_ = getDefaultInstance().getUserId();
  }
  /**
   * <pre>
   * The user ID set via the setUserId API.
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @param value The bytes for userId to set.
   */
  private void setUserIdBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    userId_ = value.toStringUtf8();
    
  }

  public static final int FIRST_OPEN_TIMESTAMP_MICROS_FIELD_NUMBER = 2;
  private long firstOpenTimestampMicros_;
  /**
   * <pre>
   * The time (in microseconds) at which the user first opened the app.
   * </pre>
   *
   * <code>int64 first_open_timestamp_micros = 2;</code>
   * @return The firstOpenTimestampMicros.
   */
  @java.lang.Override
  public long getFirstOpenTimestampMicros() {
    return firstOpenTimestampMicros_;
  }
  /**
   * <pre>
   * The time (in microseconds) at which the user first opened the app.
   * </pre>
   *
   * <code>int64 first_open_timestamp_micros = 2;</code>
   * @param value The firstOpenTimestampMicros to set.
   */
  private void setFirstOpenTimestampMicros(long value) {
    
    firstOpenTimestampMicros_ = value;
  }
  /**
   * <pre>
   * The time (in microseconds) at which the user first opened the app.
   * </pre>
   *
   * <code>int64 first_open_timestamp_micros = 2;</code>
   */
  private void clearFirstOpenTimestampMicros() {
    
    firstOpenTimestampMicros_ = 0L;
  }

  public static final int USER_PROPERTIES_FIELD_NUMBER = 3;
  private static final class UserPropertiesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                google.events.firebase.analytics.v1.UserPropertyValue.getDefaultInstance());
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> userProperties_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue>
  internalGetUserProperties() {
    return userProperties_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue>
  internalGetMutableUserProperties() {
    if (!userProperties_.isMutable()) {
      userProperties_ = userProperties_.mutableCopy();
    }
    return userProperties_;
  }
  @java.lang.Override

  public int getUserPropertiesCount() {
    return internalGetUserProperties().size();
  }
  /**
   * <pre>
   * A repeated record of user properties set with the setUserProperty API.
   * https://firebase.google.com/docs/analytics/android/properties
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
   */
  @java.lang.Override

  public boolean containsUserProperties(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetUserProperties().containsKey(key);
  }
  /**
   * Use {@link #getUserPropertiesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> getUserProperties() {
    return getUserPropertiesMap();
  }
  /**
   * <pre>
   * A repeated record of user properties set with the setUserProperty API.
   * https://firebase.google.com/docs/analytics/android/properties
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> getUserPropertiesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetUserProperties());
  }
  /**
   * <pre>
   * A repeated record of user properties set with the setUserProperty API.
   * https://firebase.google.com/docs/analytics/android/properties
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
   */
  @java.lang.Override

  public google.events.firebase.analytics.v1.UserPropertyValue getUserPropertiesOrDefault(
      java.lang.String key,
      google.events.firebase.analytics.v1.UserPropertyValue defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> map =
        internalGetUserProperties();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A repeated record of user properties set with the setUserProperty API.
   * https://firebase.google.com/docs/analytics/android/properties
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
   */
  @java.lang.Override

  public google.events.firebase.analytics.v1.UserPropertyValue getUserPropertiesOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> map =
        internalGetUserProperties();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * A repeated record of user properties set with the setUserProperty API.
   * https://firebase.google.com/docs/analytics/android/properties
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
   */
  private java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue>
  getMutableUserPropertiesMap() {
    return internalGetMutableUserProperties();
  }

  public static final int DEVICE_INFO_FIELD_NUMBER = 4;
  private google.events.firebase.analytics.v1.DeviceInfo deviceInfo_;
  /**
   * <pre>
   * Device information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
   */
  @java.lang.Override
  public boolean hasDeviceInfo() {
    return deviceInfo_ != null;
  }
  /**
   * <pre>
   * Device information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.DeviceInfo getDeviceInfo() {
    return deviceInfo_ == null ? google.events.firebase.analytics.v1.DeviceInfo.getDefaultInstance() : deviceInfo_;
  }
  /**
   * <pre>
   * Device information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
   */
  private void setDeviceInfo(google.events.firebase.analytics.v1.DeviceInfo value) {
    value.getClass();
  deviceInfo_ = value;
    
    }
  /**
   * <pre>
   * Device information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeDeviceInfo(google.events.firebase.analytics.v1.DeviceInfo value) {
    value.getClass();
  if (deviceInfo_ != null &&
        deviceInfo_ != google.events.firebase.analytics.v1.DeviceInfo.getDefaultInstance()) {
      deviceInfo_ =
        google.events.firebase.analytics.v1.DeviceInfo.newBuilder(deviceInfo_).mergeFrom(value).buildPartial();
    } else {
      deviceInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * Device information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
   */
  private void clearDeviceInfo() {  deviceInfo_ = null;
    
  }

  public static final int GEO_INFO_FIELD_NUMBER = 5;
  private google.events.firebase.analytics.v1.GeoInfo geoInfo_;
  /**
   * <pre>
   * User's geographic information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
   */
  @java.lang.Override
  public boolean hasGeoInfo() {
    return geoInfo_ != null;
  }
  /**
   * <pre>
   * User's geographic information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.GeoInfo getGeoInfo() {
    return geoInfo_ == null ? google.events.firebase.analytics.v1.GeoInfo.getDefaultInstance() : geoInfo_;
  }
  /**
   * <pre>
   * User's geographic information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
   */
  private void setGeoInfo(google.events.firebase.analytics.v1.GeoInfo value) {
    value.getClass();
  geoInfo_ = value;
    
    }
  /**
   * <pre>
   * User's geographic information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeGeoInfo(google.events.firebase.analytics.v1.GeoInfo value) {
    value.getClass();
  if (geoInfo_ != null &&
        geoInfo_ != google.events.firebase.analytics.v1.GeoInfo.getDefaultInstance()) {
      geoInfo_ =
        google.events.firebase.analytics.v1.GeoInfo.newBuilder(geoInfo_).mergeFrom(value).buildPartial();
    } else {
      geoInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * User's geographic information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
   */
  private void clearGeoInfo() {  geoInfo_ = null;
    
  }

  public static final int APP_INFO_FIELD_NUMBER = 6;
  private google.events.firebase.analytics.v1.AppInfo appInfo_;
  /**
   * <pre>
   * App information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
   */
  @java.lang.Override
  public boolean hasAppInfo() {
    return appInfo_ != null;
  }
  /**
   * <pre>
   * App information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.AppInfo getAppInfo() {
    return appInfo_ == null ? google.events.firebase.analytics.v1.AppInfo.getDefaultInstance() : appInfo_;
  }
  /**
   * <pre>
   * App information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
   */
  private void setAppInfo(google.events.firebase.analytics.v1.AppInfo value) {
    value.getClass();
  appInfo_ = value;
    
    }
  /**
   * <pre>
   * App information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeAppInfo(google.events.firebase.analytics.v1.AppInfo value) {
    value.getClass();
  if (appInfo_ != null &&
        appInfo_ != google.events.firebase.analytics.v1.AppInfo.getDefaultInstance()) {
      appInfo_ =
        google.events.firebase.analytics.v1.AppInfo.newBuilder(appInfo_).mergeFrom(value).buildPartial();
    } else {
      appInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * App information.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
   */
  private void clearAppInfo() {  appInfo_ = null;
    
  }

  public static final int TRAFFIC_SOURCE_FIELD_NUMBER = 7;
  private google.events.firebase.analytics.v1.TrafficSource trafficSource_;
  /**
   * <pre>
   * Information about marketing campaign which acquired the user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
   */
  @java.lang.Override
  public boolean hasTrafficSource() {
    return trafficSource_ != null;
  }
  /**
   * <pre>
   * Information about marketing campaign which acquired the user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.TrafficSource getTrafficSource() {
    return trafficSource_ == null ? google.events.firebase.analytics.v1.TrafficSource.getDefaultInstance() : trafficSource_;
  }
  /**
   * <pre>
   * Information about marketing campaign which acquired the user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
   */
  private void setTrafficSource(google.events.firebase.analytics.v1.TrafficSource value) {
    value.getClass();
  trafficSource_ = value;
    
    }
  /**
   * <pre>
   * Information about marketing campaign which acquired the user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTrafficSource(google.events.firebase.analytics.v1.TrafficSource value) {
    value.getClass();
  if (trafficSource_ != null &&
        trafficSource_ != google.events.firebase.analytics.v1.TrafficSource.getDefaultInstance()) {
      trafficSource_ =
        google.events.firebase.analytics.v1.TrafficSource.newBuilder(trafficSource_).mergeFrom(value).buildPartial();
    } else {
      trafficSource_ = value;
    }
    
  }
  /**
   * <pre>
   * Information about marketing campaign which acquired the user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
   */
  private void clearTrafficSource() {  trafficSource_ = null;
    
  }

  public static final int BUNDLE_INFO_FIELD_NUMBER = 8;
  private google.events.firebase.analytics.v1.ExportBundleInfo bundleInfo_;
  /**
   * <pre>
   * Information regarding the bundle in which these events were uploaded.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
   */
  @java.lang.Override
  public boolean hasBundleInfo() {
    return bundleInfo_ != null;
  }
  /**
   * <pre>
   * Information regarding the bundle in which these events were uploaded.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.ExportBundleInfo getBundleInfo() {
    return bundleInfo_ == null ? google.events.firebase.analytics.v1.ExportBundleInfo.getDefaultInstance() : bundleInfo_;
  }
  /**
   * <pre>
   * Information regarding the bundle in which these events were uploaded.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
   */
  private void setBundleInfo(google.events.firebase.analytics.v1.ExportBundleInfo value) {
    value.getClass();
  bundleInfo_ = value;
    
    }
  /**
   * <pre>
   * Information regarding the bundle in which these events were uploaded.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeBundleInfo(google.events.firebase.analytics.v1.ExportBundleInfo value) {
    value.getClass();
  if (bundleInfo_ != null &&
        bundleInfo_ != google.events.firebase.analytics.v1.ExportBundleInfo.getDefaultInstance()) {
      bundleInfo_ =
        google.events.firebase.analytics.v1.ExportBundleInfo.newBuilder(bundleInfo_).mergeFrom(value).buildPartial();
    } else {
      bundleInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * Information regarding the bundle in which these events were uploaded.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
   */
  private void clearBundleInfo() {  bundleInfo_ = null;
    
  }

  public static final int LTV_INFO_FIELD_NUMBER = 9;
  private google.events.firebase.analytics.v1.LtvInfo ltvInfo_;
  /**
   * <pre>
   * Lifetime Value information about this user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
   */
  @java.lang.Override
  public boolean hasLtvInfo() {
    return ltvInfo_ != null;
  }
  /**
   * <pre>
   * Lifetime Value information about this user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
   */
  @java.lang.Override
  public google.events.firebase.analytics.v1.LtvInfo getLtvInfo() {
    return ltvInfo_ == null ? google.events.firebase.analytics.v1.LtvInfo.getDefaultInstance() : ltvInfo_;
  }
  /**
   * <pre>
   * Lifetime Value information about this user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
   */
  private void setLtvInfo(google.events.firebase.analytics.v1.LtvInfo value) {
    value.getClass();
  ltvInfo_ = value;
    
    }
  /**
   * <pre>
   * Lifetime Value information about this user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeLtvInfo(google.events.firebase.analytics.v1.LtvInfo value) {
    value.getClass();
  if (ltvInfo_ != null &&
        ltvInfo_ != google.events.firebase.analytics.v1.LtvInfo.getDefaultInstance()) {
      ltvInfo_ =
        google.events.firebase.analytics.v1.LtvInfo.newBuilder(ltvInfo_).mergeFrom(value).buildPartial();
    } else {
      ltvInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * Lifetime Value information about this user.
   * </pre>
   *
   * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
   */
  private void clearLtvInfo() {  ltvInfo_ = null;
    
  }

  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.UserDimensions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.firebase.analytics.v1.UserDimensions prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Message containing information about the user associated with the event.
   * </pre>
   *
   * Protobuf type {@code google.events.firebase.analytics.v1.UserDimensions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.firebase.analytics.v1.UserDimensions, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.firebase.analytics.v1.UserDimensions)
      google.events.firebase.analytics.v1.UserDimensionsOrBuilder {
    // Construct using google.events.firebase.analytics.v1.UserDimensions.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The user ID set via the setUserId API.
     * </pre>
     *
     * <code>string user_id = 1;</code>
     * @return The userId.
     */
    @java.lang.Override
    public java.lang.String getUserId() {
      return instance.getUserId();
    }
    /**
     * <pre>
     * The user ID set via the setUserId API.
     * </pre>
     *
     * <code>string user_id = 1;</code>
     * @return The bytes for userId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUserIdBytes() {
      return instance.getUserIdBytes();
    }
    /**
     * <pre>
     * The user ID set via the setUserId API.
     * </pre>
     *
     * <code>string user_id = 1;</code>
     * @param value The userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserId(
        java.lang.String value) {
      copyOnWrite();
      instance.setUserId(value);
      return this;
    }
    /**
     * <pre>
     * The user ID set via the setUserId API.
     * </pre>
     *
     * <code>string user_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUserId() {
      copyOnWrite();
      instance.clearUserId();
      return this;
    }
    /**
     * <pre>
     * The user ID set via the setUserId API.
     * </pre>
     *
     * <code>string user_id = 1;</code>
     * @param value The bytes for userId to set.
     * @return This builder for chaining.
     */
    public Builder setUserIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * The time (in microseconds) at which the user first opened the app.
     * </pre>
     *
     * <code>int64 first_open_timestamp_micros = 2;</code>
     * @return The firstOpenTimestampMicros.
     */
    @java.lang.Override
    public long getFirstOpenTimestampMicros() {
      return instance.getFirstOpenTimestampMicros();
    }
    /**
     * <pre>
     * The time (in microseconds) at which the user first opened the app.
     * </pre>
     *
     * <code>int64 first_open_timestamp_micros = 2;</code>
     * @param value The firstOpenTimestampMicros to set.
     * @return This builder for chaining.
     */
    public Builder setFirstOpenTimestampMicros(long value) {
      copyOnWrite();
      instance.setFirstOpenTimestampMicros(value);
      return this;
    }
    /**
     * <pre>
     * The time (in microseconds) at which the user first opened the app.
     * </pre>
     *
     * <code>int64 first_open_timestamp_micros = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearFirstOpenTimestampMicros() {
      copyOnWrite();
      instance.clearFirstOpenTimestampMicros();
      return this;
    }

    @java.lang.Override

    public int getUserPropertiesCount() {
      return instance.getUserPropertiesMap().size();
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    @java.lang.Override

    public boolean containsUserProperties(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getUserPropertiesMap().containsKey(key);
    }

    public Builder clearUserProperties() {
      copyOnWrite();
      instance.getMutableUserPropertiesMap().clear();
      return this;
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */

    public Builder removeUserProperties(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableUserPropertiesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getUserPropertiesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> getUserProperties() {
      return getUserPropertiesMap();
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> getUserPropertiesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getUserPropertiesMap());
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    @java.lang.Override

    public google.events.firebase.analytics.v1.UserPropertyValue getUserPropertiesOrDefault(
        java.lang.String key,
        google.events.firebase.analytics.v1.UserPropertyValue defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> map =
          instance.getUserPropertiesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    @java.lang.Override

    public google.events.firebase.analytics.v1.UserPropertyValue getUserPropertiesOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> map =
          instance.getUserPropertiesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    public Builder putUserProperties(
        java.lang.String key,
        google.events.firebase.analytics.v1.UserPropertyValue value) {
      java.lang.Class<?> keyClass = key.getClass();
      java.lang.Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableUserPropertiesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * A repeated record of user properties set with the setUserProperty API.
     * https://firebase.google.com/docs/analytics/android/properties
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.UserPropertyValue&gt; user_properties = 3;</code>
     */
    public Builder putAllUserProperties(
        java.util.Map<java.lang.String, google.events.firebase.analytics.v1.UserPropertyValue> values) {
      copyOnWrite();
      instance.getMutableUserPropertiesMap().putAll(values);
      return this;
    }

    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    @java.lang.Override
    public boolean hasDeviceInfo() {
      return instance.hasDeviceInfo();
    }
    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.DeviceInfo getDeviceInfo() {
      return instance.getDeviceInfo();
    }
    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    public Builder setDeviceInfo(google.events.firebase.analytics.v1.DeviceInfo value) {
      copyOnWrite();
      instance.setDeviceInfo(value);
      return this;
      }
    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    public Builder setDeviceInfo(
        google.events.firebase.analytics.v1.DeviceInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setDeviceInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    public Builder mergeDeviceInfo(google.events.firebase.analytics.v1.DeviceInfo value) {
      copyOnWrite();
      instance.mergeDeviceInfo(value);
      return this;
    }
    /**
     * <pre>
     * Device information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.DeviceInfo device_info = 4;</code>
     */
    public Builder clearDeviceInfo() {  copyOnWrite();
      instance.clearDeviceInfo();
      return this;
    }

    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    @java.lang.Override
    public boolean hasGeoInfo() {
      return instance.hasGeoInfo();
    }
    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.GeoInfo getGeoInfo() {
      return instance.getGeoInfo();
    }
    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    public Builder setGeoInfo(google.events.firebase.analytics.v1.GeoInfo value) {
      copyOnWrite();
      instance.setGeoInfo(value);
      return this;
      }
    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    public Builder setGeoInfo(
        google.events.firebase.analytics.v1.GeoInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setGeoInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    public Builder mergeGeoInfo(google.events.firebase.analytics.v1.GeoInfo value) {
      copyOnWrite();
      instance.mergeGeoInfo(value);
      return this;
    }
    /**
     * <pre>
     * User's geographic information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.GeoInfo geo_info = 5;</code>
     */
    public Builder clearGeoInfo() {  copyOnWrite();
      instance.clearGeoInfo();
      return this;
    }

    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    @java.lang.Override
    public boolean hasAppInfo() {
      return instance.hasAppInfo();
    }
    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.AppInfo getAppInfo() {
      return instance.getAppInfo();
    }
    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    public Builder setAppInfo(google.events.firebase.analytics.v1.AppInfo value) {
      copyOnWrite();
      instance.setAppInfo(value);
      return this;
      }
    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    public Builder setAppInfo(
        google.events.firebase.analytics.v1.AppInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setAppInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    public Builder mergeAppInfo(google.events.firebase.analytics.v1.AppInfo value) {
      copyOnWrite();
      instance.mergeAppInfo(value);
      return this;
    }
    /**
     * <pre>
     * App information.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.AppInfo app_info = 6;</code>
     */
    public Builder clearAppInfo() {  copyOnWrite();
      instance.clearAppInfo();
      return this;
    }

    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    @java.lang.Override
    public boolean hasTrafficSource() {
      return instance.hasTrafficSource();
    }
    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.TrafficSource getTrafficSource() {
      return instance.getTrafficSource();
    }
    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    public Builder setTrafficSource(google.events.firebase.analytics.v1.TrafficSource value) {
      copyOnWrite();
      instance.setTrafficSource(value);
      return this;
      }
    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    public Builder setTrafficSource(
        google.events.firebase.analytics.v1.TrafficSource.Builder builderForValue) {
      copyOnWrite();
      instance.setTrafficSource(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    public Builder mergeTrafficSource(google.events.firebase.analytics.v1.TrafficSource value) {
      copyOnWrite();
      instance.mergeTrafficSource(value);
      return this;
    }
    /**
     * <pre>
     * Information about marketing campaign which acquired the user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.TrafficSource traffic_source = 7;</code>
     */
    public Builder clearTrafficSource() {  copyOnWrite();
      instance.clearTrafficSource();
      return this;
    }

    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    @java.lang.Override
    public boolean hasBundleInfo() {
      return instance.hasBundleInfo();
    }
    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.ExportBundleInfo getBundleInfo() {
      return instance.getBundleInfo();
    }
    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    public Builder setBundleInfo(google.events.firebase.analytics.v1.ExportBundleInfo value) {
      copyOnWrite();
      instance.setBundleInfo(value);
      return this;
      }
    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    public Builder setBundleInfo(
        google.events.firebase.analytics.v1.ExportBundleInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setBundleInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    public Builder mergeBundleInfo(google.events.firebase.analytics.v1.ExportBundleInfo value) {
      copyOnWrite();
      instance.mergeBundleInfo(value);
      return this;
    }
    /**
     * <pre>
     * Information regarding the bundle in which these events were uploaded.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.ExportBundleInfo bundle_info = 8;</code>
     */
    public Builder clearBundleInfo() {  copyOnWrite();
      instance.clearBundleInfo();
      return this;
    }

    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    @java.lang.Override
    public boolean hasLtvInfo() {
      return instance.hasLtvInfo();
    }
    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    @java.lang.Override
    public google.events.firebase.analytics.v1.LtvInfo getLtvInfo() {
      return instance.getLtvInfo();
    }
    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    public Builder setLtvInfo(google.events.firebase.analytics.v1.LtvInfo value) {
      copyOnWrite();
      instance.setLtvInfo(value);
      return this;
      }
    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    public Builder setLtvInfo(
        google.events.firebase.analytics.v1.LtvInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setLtvInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    public Builder mergeLtvInfo(google.events.firebase.analytics.v1.LtvInfo value) {
      copyOnWrite();
      instance.mergeLtvInfo(value);
      return this;
    }
    /**
     * <pre>
     * Lifetime Value information about this user.
     * </pre>
     *
     * <code>.google.events.firebase.analytics.v1.LtvInfo ltv_info = 9;</code>
     */
    public Builder clearLtvInfo() {  copyOnWrite();
      instance.clearLtvInfo();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.firebase.analytics.v1.UserDimensions)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.firebase.analytics.v1.UserDimensions();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "userId_",
            "firstOpenTimestampMicros_",
            "userProperties_",
            UserPropertiesDefaultEntryHolder.defaultEntry,
            "deviceInfo_",
            "geoInfo_",
            "appInfo_",
            "trafficSource_",
            "bundleInfo_",
            "ltvInfo_",
          };
          java.lang.String info =
              "\u0000\t\u0000\u0000\u0001\t\t\u0001\u0000\u0000\u0001\u0208\u0002\u0002\u00032\u0004" +
              "\t\u0005\t\u0006\t\u0007\t\b\t\t\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.firebase.analytics.v1.UserDimensions> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.firebase.analytics.v1.UserDimensions.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.firebase.analytics.v1.UserDimensions>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.firebase.analytics.v1.UserDimensions)
  private static final google.events.firebase.analytics.v1.UserDimensions DEFAULT_INSTANCE;
  static {
    UserDimensions defaultInstance = new UserDimensions();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      UserDimensions.class, defaultInstance);
  }

  public static google.events.firebase.analytics.v1.UserDimensions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UserDimensions> PARSER;

  public static com.google.protobuf.Parser<UserDimensions> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

