// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/analytics/v1/data.proto

package google.events.firebase.analytics.v1;

/**
 * <pre>
 * Message containing information pertaining to the event.
 * </pre>
 *
 * Protobuf type {@code google.events.firebase.analytics.v1.EventDimensions}
 */
public  final class EventDimensions extends
    com.google.protobuf.GeneratedMessageLite<
        EventDimensions, EventDimensions.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.firebase.analytics.v1.EventDimensions)
    EventDimensionsOrBuilder {
  private EventDimensions() {
    date_ = "";
    name_ = "";
  }
  public static final int DATE_FIELD_NUMBER = 6;
  private java.lang.String date_;
  /**
   * <pre>
   * The date on which this event was logged.
   * (YYYYMMDD format in the registered timezone of your app.)
   * </pre>
   *
   * <code>string date = 6;</code>
   * @return The date.
   */
  @java.lang.Override
  public java.lang.String getDate() {
    return date_;
  }
  /**
   * <pre>
   * The date on which this event was logged.
   * (YYYYMMDD format in the registered timezone of your app.)
   * </pre>
   *
   * <code>string date = 6;</code>
   * @return The bytes for date.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDateBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(date_);
  }
  /**
   * <pre>
   * The date on which this event was logged.
   * (YYYYMMDD format in the registered timezone of your app.)
   * </pre>
   *
   * <code>string date = 6;</code>
   * @param value The date to set.
   */
  private void setDate(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    date_ = value;
  }
  /**
   * <pre>
   * The date on which this event was logged.
   * (YYYYMMDD format in the registered timezone of your app.)
   * </pre>
   *
   * <code>string date = 6;</code>
   */
  private void clearDate() {
    
    date_ = getDefaultInstance().getDate();
  }
  /**
   * <pre>
   * The date on which this event was logged.
   * (YYYYMMDD format in the registered timezone of your app.)
   * </pre>
   *
   * <code>string date = 6;</code>
   * @param value The bytes for date to set.
   */
  private void setDateBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    date_ = value.toStringUtf8();
    
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The name of this event.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The name of this event.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The name of this event.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * The name of this event.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The name of this event.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int PARAMS_FIELD_NUMBER = 2;
  private static final class ParamsDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                google.events.firebase.analytics.v1.AnalyticsValue.getDefaultInstance());
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> params_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue>
  internalGetParams() {
    return params_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue>
  internalGetMutableParams() {
    if (!params_.isMutable()) {
      params_ = params_.mutableCopy();
    }
    return params_;
  }
  @java.lang.Override

  public int getParamsCount() {
    return internalGetParams().size();
  }
  /**
   * <pre>
   * A repeated record of the parameters associated with this event.
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
   */
  @java.lang.Override

  public boolean containsParams(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetParams().containsKey(key);
  }
  /**
   * Use {@link #getParamsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> getParams() {
    return getParamsMap();
  }
  /**
   * <pre>
   * A repeated record of the parameters associated with this event.
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> getParamsMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetParams());
  }
  /**
   * <pre>
   * A repeated record of the parameters associated with this event.
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
   */
  @java.lang.Override

  public google.events.firebase.analytics.v1.AnalyticsValue getParamsOrDefault(
      java.lang.String key,
      google.events.firebase.analytics.v1.AnalyticsValue defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> map =
        internalGetParams();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A repeated record of the parameters associated with this event.
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
   */
  @java.lang.Override

  public google.events.firebase.analytics.v1.AnalyticsValue getParamsOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> map =
        internalGetParams();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * A repeated record of the parameters associated with this event.
   * </pre>
   *
   * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
   */
  private java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue>
  getMutableParamsMap() {
    return internalGetMutableParams();
  }

  public static final int TIMESTAMP_MICROS_FIELD_NUMBER = 4;
  private long timestampMicros_;
  /**
   * <pre>
   * UTC client time when the event happened.
   * </pre>
   *
   * <code>int64 timestamp_micros = 4;</code>
   * @return The timestampMicros.
   */
  @java.lang.Override
  public long getTimestampMicros() {
    return timestampMicros_;
  }
  /**
   * <pre>
   * UTC client time when the event happened.
   * </pre>
   *
   * <code>int64 timestamp_micros = 4;</code>
   * @param value The timestampMicros to set.
   */
  private void setTimestampMicros(long value) {
    
    timestampMicros_ = value;
  }
  /**
   * <pre>
   * UTC client time when the event happened.
   * </pre>
   *
   * <code>int64 timestamp_micros = 4;</code>
   */
  private void clearTimestampMicros() {
    
    timestampMicros_ = 0L;
  }

  public static final int PREVIOUS_TIMESTAMP_MICROS_FIELD_NUMBER = 5;
  private long previousTimestampMicros_;
  /**
   * <pre>
   * UTC client time when the previous event happened.
   * </pre>
   *
   * <code>int64 previous_timestamp_micros = 5;</code>
   * @return The previousTimestampMicros.
   */
  @java.lang.Override
  public long getPreviousTimestampMicros() {
    return previousTimestampMicros_;
  }
  /**
   * <pre>
   * UTC client time when the previous event happened.
   * </pre>
   *
   * <code>int64 previous_timestamp_micros = 5;</code>
   * @param value The previousTimestampMicros to set.
   */
  private void setPreviousTimestampMicros(long value) {
    
    previousTimestampMicros_ = value;
  }
  /**
   * <pre>
   * UTC client time when the previous event happened.
   * </pre>
   *
   * <code>int64 previous_timestamp_micros = 5;</code>
   */
  private void clearPreviousTimestampMicros() {
    
    previousTimestampMicros_ = 0L;
  }

  public static final int VALUE_IN_USD_FIELD_NUMBER = 7;
  private double valueInUsd_;
  /**
   * <pre>
   * Value param in USD.
   * </pre>
   *
   * <code>double value_in_usd = 7;</code>
   * @return The valueInUsd.
   */
  @java.lang.Override
  public double getValueInUsd() {
    return valueInUsd_;
  }
  /**
   * <pre>
   * Value param in USD.
   * </pre>
   *
   * <code>double value_in_usd = 7;</code>
   * @param value The valueInUsd to set.
   */
  private void setValueInUsd(double value) {
    
    valueInUsd_ = value;
  }
  /**
   * <pre>
   * Value param in USD.
   * </pre>
   *
   * <code>double value_in_usd = 7;</code>
   */
  private void clearValueInUsd() {
    
    valueInUsd_ = 0D;
  }

  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.analytics.v1.EventDimensions parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.firebase.analytics.v1.EventDimensions prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Message containing information pertaining to the event.
   * </pre>
   *
   * Protobuf type {@code google.events.firebase.analytics.v1.EventDimensions}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.firebase.analytics.v1.EventDimensions, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.firebase.analytics.v1.EventDimensions)
      google.events.firebase.analytics.v1.EventDimensionsOrBuilder {
    // Construct using google.events.firebase.analytics.v1.EventDimensions.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The date on which this event was logged.
     * (YYYYMMDD format in the registered timezone of your app.)
     * </pre>
     *
     * <code>string date = 6;</code>
     * @return The date.
     */
    @java.lang.Override
    public java.lang.String getDate() {
      return instance.getDate();
    }
    /**
     * <pre>
     * The date on which this event was logged.
     * (YYYYMMDD format in the registered timezone of your app.)
     * </pre>
     *
     * <code>string date = 6;</code>
     * @return The bytes for date.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDateBytes() {
      return instance.getDateBytes();
    }
    /**
     * <pre>
     * The date on which this event was logged.
     * (YYYYMMDD format in the registered timezone of your app.)
     * </pre>
     *
     * <code>string date = 6;</code>
     * @param value The date to set.
     * @return This builder for chaining.
     */
    public Builder setDate(
        java.lang.String value) {
      copyOnWrite();
      instance.setDate(value);
      return this;
    }
    /**
     * <pre>
     * The date on which this event was logged.
     * (YYYYMMDD format in the registered timezone of your app.)
     * </pre>
     *
     * <code>string date = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearDate() {
      copyOnWrite();
      instance.clearDate();
      return this;
    }
    /**
     * <pre>
     * The date on which this event was logged.
     * (YYYYMMDD format in the registered timezone of your app.)
     * </pre>
     *
     * <code>string date = 6;</code>
     * @param value The bytes for date to set.
     * @return This builder for chaining.
     */
    public Builder setDateBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDateBytes(value);
      return this;
    }

    /**
     * <pre>
     * The name of this event.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The name of this event.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The name of this event.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The name of this event.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The name of this event.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    @java.lang.Override

    public int getParamsCount() {
      return instance.getParamsMap().size();
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    @java.lang.Override

    public boolean containsParams(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getParamsMap().containsKey(key);
    }

    public Builder clearParams() {
      copyOnWrite();
      instance.getMutableParamsMap().clear();
      return this;
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */

    public Builder removeParams(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableParamsMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> getParams() {
      return getParamsMap();
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> getParamsMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getParamsMap());
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    @java.lang.Override

    public google.events.firebase.analytics.v1.AnalyticsValue getParamsOrDefault(
        java.lang.String key,
        google.events.firebase.analytics.v1.AnalyticsValue defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> map =
          instance.getParamsMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    @java.lang.Override

    public google.events.firebase.analytics.v1.AnalyticsValue getParamsOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> map =
          instance.getParamsMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    public Builder putParams(
        java.lang.String key,
        google.events.firebase.analytics.v1.AnalyticsValue value) {
      java.lang.Class<?> keyClass = key.getClass();
      java.lang.Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableParamsMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * A repeated record of the parameters associated with this event.
     * </pre>
     *
     * <code>map&lt;string, .google.events.firebase.analytics.v1.AnalyticsValue&gt; params = 2;</code>
     */
    public Builder putAllParams(
        java.util.Map<java.lang.String, google.events.firebase.analytics.v1.AnalyticsValue> values) {
      copyOnWrite();
      instance.getMutableParamsMap().putAll(values);
      return this;
    }

    /**
     * <pre>
     * UTC client time when the event happened.
     * </pre>
     *
     * <code>int64 timestamp_micros = 4;</code>
     * @return The timestampMicros.
     */
    @java.lang.Override
    public long getTimestampMicros() {
      return instance.getTimestampMicros();
    }
    /**
     * <pre>
     * UTC client time when the event happened.
     * </pre>
     *
     * <code>int64 timestamp_micros = 4;</code>
     * @param value The timestampMicros to set.
     * @return This builder for chaining.
     */
    public Builder setTimestampMicros(long value) {
      copyOnWrite();
      instance.setTimestampMicros(value);
      return this;
    }
    /**
     * <pre>
     * UTC client time when the event happened.
     * </pre>
     *
     * <code>int64 timestamp_micros = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimestampMicros() {
      copyOnWrite();
      instance.clearTimestampMicros();
      return this;
    }

    /**
     * <pre>
     * UTC client time when the previous event happened.
     * </pre>
     *
     * <code>int64 previous_timestamp_micros = 5;</code>
     * @return The previousTimestampMicros.
     */
    @java.lang.Override
    public long getPreviousTimestampMicros() {
      return instance.getPreviousTimestampMicros();
    }
    /**
     * <pre>
     * UTC client time when the previous event happened.
     * </pre>
     *
     * <code>int64 previous_timestamp_micros = 5;</code>
     * @param value The previousTimestampMicros to set.
     * @return This builder for chaining.
     */
    public Builder setPreviousTimestampMicros(long value) {
      copyOnWrite();
      instance.setPreviousTimestampMicros(value);
      return this;
    }
    /**
     * <pre>
     * UTC client time when the previous event happened.
     * </pre>
     *
     * <code>int64 previous_timestamp_micros = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearPreviousTimestampMicros() {
      copyOnWrite();
      instance.clearPreviousTimestampMicros();
      return this;
    }

    /**
     * <pre>
     * Value param in USD.
     * </pre>
     *
     * <code>double value_in_usd = 7;</code>
     * @return The valueInUsd.
     */
    @java.lang.Override
    public double getValueInUsd() {
      return instance.getValueInUsd();
    }
    /**
     * <pre>
     * Value param in USD.
     * </pre>
     *
     * <code>double value_in_usd = 7;</code>
     * @param value The valueInUsd to set.
     * @return This builder for chaining.
     */
    public Builder setValueInUsd(double value) {
      copyOnWrite();
      instance.setValueInUsd(value);
      return this;
    }
    /**
     * <pre>
     * Value param in USD.
     * </pre>
     *
     * <code>double value_in_usd = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearValueInUsd() {
      copyOnWrite();
      instance.clearValueInUsd();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.firebase.analytics.v1.EventDimensions)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.firebase.analytics.v1.EventDimensions();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "name_",
            "params_",
            ParamsDefaultEntryHolder.defaultEntry,
            "timestampMicros_",
            "previousTimestampMicros_",
            "date_",
            "valueInUsd_",
          };
          java.lang.String info =
              "\u0000\u0006\u0000\u0000\u0001\u0007\u0006\u0001\u0000\u0000\u0001\u0208\u00022\u0004" +
              "\u0002\u0005\u0002\u0006\u0208\u0007\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.firebase.analytics.v1.EventDimensions> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.firebase.analytics.v1.EventDimensions.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.firebase.analytics.v1.EventDimensions>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.firebase.analytics.v1.EventDimensions)
  private static final google.events.firebase.analytics.v1.EventDimensions DEFAULT_INSTANCE;
  static {
    EventDimensions defaultInstance = new EventDimensions();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      EventDimensions.class, defaultInstance);
  }

  public static google.events.firebase.analytics.v1.EventDimensions getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<EventDimensions> PARSER;

  public static com.google.protobuf.Parser<EventDimensions> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

