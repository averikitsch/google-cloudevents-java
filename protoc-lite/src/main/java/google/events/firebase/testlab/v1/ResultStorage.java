// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/testlab/v1/data.proto

package google.events.firebase.testlab.v1;

/**
 * <pre>
 * Locations where test results are stored.
 * </pre>
 *
 * Protobuf type {@code google.events.firebase.testlab.v1.ResultStorage}
 */
public  final class ResultStorage extends
    com.google.protobuf.GeneratedMessageLite<
        ResultStorage, ResultStorage.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.firebase.testlab.v1.ResultStorage)
    ResultStorageOrBuilder {
  private ResultStorage() {
    toolResultsHistory_ = "";
    toolResultsExecution_ = "";
    resultsUri_ = "";
    gcsPath_ = "";
  }
  public static final int TOOL_RESULTS_HISTORY_FIELD_NUMBER = 1;
  private java.lang.String toolResultsHistory_;
  /**
   * <pre>
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_history = 1;</code>
   * @return The toolResultsHistory.
   */
  @java.lang.Override
  public java.lang.String getToolResultsHistory() {
    return toolResultsHistory_;
  }
  /**
   * <pre>
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_history = 1;</code>
   * @return The bytes for toolResultsHistory.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getToolResultsHistoryBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(toolResultsHistory_);
  }
  /**
   * <pre>
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_history = 1;</code>
   * @param value The toolResultsHistory to set.
   */
  private void setToolResultsHistory(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    toolResultsHistory_ = value;
  }
  /**
   * <pre>
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_history = 1;</code>
   */
  private void clearToolResultsHistory() {
    
    toolResultsHistory_ = getDefaultInstance().getToolResultsHistory();
  }
  /**
   * <pre>
   * Tool Results history resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}`.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_history = 1;</code>
   * @param value The bytes for toolResultsHistory to set.
   */
  private void setToolResultsHistoryBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    toolResultsHistory_ = value.toStringUtf8();
    
  }

  public static final int TOOL_RESULTS_EXECUTION_FIELD_NUMBER = 2;
  private java.lang.String toolResultsExecution_;
  /**
   * <pre>
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_execution = 2;</code>
   * @return The toolResultsExecution.
   */
  @java.lang.Override
  public java.lang.String getToolResultsExecution() {
    return toolResultsExecution_;
  }
  /**
   * <pre>
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_execution = 2;</code>
   * @return The bytes for toolResultsExecution.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getToolResultsExecutionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(toolResultsExecution_);
  }
  /**
   * <pre>
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_execution = 2;</code>
   * @param value The toolResultsExecution to set.
   */
  private void setToolResultsExecution(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    toolResultsExecution_ = value;
  }
  /**
   * <pre>
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_execution = 2;</code>
   */
  private void clearToolResultsExecution() {
    
    toolResultsExecution_ = getDefaultInstance().getToolResultsExecution();
  }
  /**
   * <pre>
   * Tool Results execution resource containing test results. Format is
   * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
   * Optional, can be omitted in erroneous test states.
   * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
   * for more information.
   * </pre>
   *
   * <code>string tool_results_execution = 2;</code>
   * @param value The bytes for toolResultsExecution to set.
   */
  private void setToolResultsExecutionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    toolResultsExecution_ = value.toStringUtf8();
    
  }

  public static final int RESULTS_URI_FIELD_NUMBER = 3;
  private java.lang.String resultsUri_;
  /**
   * <pre>
   * URI to the test results in the Firebase Web Console.
   * </pre>
   *
   * <code>string results_uri = 3;</code>
   * @return The resultsUri.
   */
  @java.lang.Override
  public java.lang.String getResultsUri() {
    return resultsUri_;
  }
  /**
   * <pre>
   * URI to the test results in the Firebase Web Console.
   * </pre>
   *
   * <code>string results_uri = 3;</code>
   * @return The bytes for resultsUri.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getResultsUriBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(resultsUri_);
  }
  /**
   * <pre>
   * URI to the test results in the Firebase Web Console.
   * </pre>
   *
   * <code>string results_uri = 3;</code>
   * @param value The resultsUri to set.
   */
  private void setResultsUri(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    resultsUri_ = value;
  }
  /**
   * <pre>
   * URI to the test results in the Firebase Web Console.
   * </pre>
   *
   * <code>string results_uri = 3;</code>
   */
  private void clearResultsUri() {
    
    resultsUri_ = getDefaultInstance().getResultsUri();
  }
  /**
   * <pre>
   * URI to the test results in the Firebase Web Console.
   * </pre>
   *
   * <code>string results_uri = 3;</code>
   * @param value The bytes for resultsUri to set.
   */
  private void setResultsUriBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    resultsUri_ = value.toStringUtf8();
    
  }

  public static final int GCS_PATH_FIELD_NUMBER = 4;
  private java.lang.String gcsPath_;
  /**
   * <pre>
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   * </pre>
   *
   * <code>string gcs_path = 4;</code>
   * @return The gcsPath.
   */
  @java.lang.Override
  public java.lang.String getGcsPath() {
    return gcsPath_;
  }
  /**
   * <pre>
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   * </pre>
   *
   * <code>string gcs_path = 4;</code>
   * @return The bytes for gcsPath.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGcsPathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(gcsPath_);
  }
  /**
   * <pre>
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   * </pre>
   *
   * <code>string gcs_path = 4;</code>
   * @param value The gcsPath to set.
   */
  private void setGcsPath(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    gcsPath_ = value;
  }
  /**
   * <pre>
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   * </pre>
   *
   * <code>string gcs_path = 4;</code>
   */
  private void clearGcsPath() {
    
    gcsPath_ = getDefaultInstance().getGcsPath();
  }
  /**
   * <pre>
   * Location in Google Cloud Storage where test results are written to.
   * In the form "gs://bucket/path/to/somewhere".
   * </pre>
   *
   * <code>string gcs_path = 4;</code>
   * @param value The bytes for gcsPath to set.
   */
  private void setGcsPathBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    gcsPath_ = value.toStringUtf8();
    
  }

  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.firebase.testlab.v1.ResultStorage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.firebase.testlab.v1.ResultStorage prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Locations where test results are stored.
   * </pre>
   *
   * Protobuf type {@code google.events.firebase.testlab.v1.ResultStorage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.firebase.testlab.v1.ResultStorage, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.firebase.testlab.v1.ResultStorage)
      google.events.firebase.testlab.v1.ResultStorageOrBuilder {
    // Construct using google.events.firebase.testlab.v1.ResultStorage.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Tool Results history resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}`.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_history = 1;</code>
     * @return The toolResultsHistory.
     */
    @java.lang.Override
    public java.lang.String getToolResultsHistory() {
      return instance.getToolResultsHistory();
    }
    /**
     * <pre>
     * Tool Results history resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}`.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_history = 1;</code>
     * @return The bytes for toolResultsHistory.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getToolResultsHistoryBytes() {
      return instance.getToolResultsHistoryBytes();
    }
    /**
     * <pre>
     * Tool Results history resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}`.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_history = 1;</code>
     * @param value The toolResultsHistory to set.
     * @return This builder for chaining.
     */
    public Builder setToolResultsHistory(
        java.lang.String value) {
      copyOnWrite();
      instance.setToolResultsHistory(value);
      return this;
    }
    /**
     * <pre>
     * Tool Results history resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}`.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_history = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearToolResultsHistory() {
      copyOnWrite();
      instance.clearToolResultsHistory();
      return this;
    }
    /**
     * <pre>
     * Tool Results history resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}`.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_history = 1;</code>
     * @param value The bytes for toolResultsHistory to set.
     * @return This builder for chaining.
     */
    public Builder setToolResultsHistoryBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setToolResultsHistoryBytes(value);
      return this;
    }

    /**
     * <pre>
     * Tool Results execution resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
     * Optional, can be omitted in erroneous test states.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_execution = 2;</code>
     * @return The toolResultsExecution.
     */
    @java.lang.Override
    public java.lang.String getToolResultsExecution() {
      return instance.getToolResultsExecution();
    }
    /**
     * <pre>
     * Tool Results execution resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
     * Optional, can be omitted in erroneous test states.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_execution = 2;</code>
     * @return The bytes for toolResultsExecution.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getToolResultsExecutionBytes() {
      return instance.getToolResultsExecutionBytes();
    }
    /**
     * <pre>
     * Tool Results execution resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
     * Optional, can be omitted in erroneous test states.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_execution = 2;</code>
     * @param value The toolResultsExecution to set.
     * @return This builder for chaining.
     */
    public Builder setToolResultsExecution(
        java.lang.String value) {
      copyOnWrite();
      instance.setToolResultsExecution(value);
      return this;
    }
    /**
     * <pre>
     * Tool Results execution resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
     * Optional, can be omitted in erroneous test states.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_execution = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearToolResultsExecution() {
      copyOnWrite();
      instance.clearToolResultsExecution();
      return this;
    }
    /**
     * <pre>
     * Tool Results execution resource containing test results. Format is
     * `projects/{project_id}/histories/{history_id}/executions/{execution_id}`.
     * Optional, can be omitted in erroneous test states.
     * See https://firebase.google.com/docs/test-lab/reference/toolresults/rest
     * for more information.
     * </pre>
     *
     * <code>string tool_results_execution = 2;</code>
     * @param value The bytes for toolResultsExecution to set.
     * @return This builder for chaining.
     */
    public Builder setToolResultsExecutionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setToolResultsExecutionBytes(value);
      return this;
    }

    /**
     * <pre>
     * URI to the test results in the Firebase Web Console.
     * </pre>
     *
     * <code>string results_uri = 3;</code>
     * @return The resultsUri.
     */
    @java.lang.Override
    public java.lang.String getResultsUri() {
      return instance.getResultsUri();
    }
    /**
     * <pre>
     * URI to the test results in the Firebase Web Console.
     * </pre>
     *
     * <code>string results_uri = 3;</code>
     * @return The bytes for resultsUri.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getResultsUriBytes() {
      return instance.getResultsUriBytes();
    }
    /**
     * <pre>
     * URI to the test results in the Firebase Web Console.
     * </pre>
     *
     * <code>string results_uri = 3;</code>
     * @param value The resultsUri to set.
     * @return This builder for chaining.
     */
    public Builder setResultsUri(
        java.lang.String value) {
      copyOnWrite();
      instance.setResultsUri(value);
      return this;
    }
    /**
     * <pre>
     * URI to the test results in the Firebase Web Console.
     * </pre>
     *
     * <code>string results_uri = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearResultsUri() {
      copyOnWrite();
      instance.clearResultsUri();
      return this;
    }
    /**
     * <pre>
     * URI to the test results in the Firebase Web Console.
     * </pre>
     *
     * <code>string results_uri = 3;</code>
     * @param value The bytes for resultsUri to set.
     * @return This builder for chaining.
     */
    public Builder setResultsUriBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setResultsUriBytes(value);
      return this;
    }

    /**
     * <pre>
     * Location in Google Cloud Storage where test results are written to.
     * In the form "gs://bucket/path/to/somewhere".
     * </pre>
     *
     * <code>string gcs_path = 4;</code>
     * @return The gcsPath.
     */
    @java.lang.Override
    public java.lang.String getGcsPath() {
      return instance.getGcsPath();
    }
    /**
     * <pre>
     * Location in Google Cloud Storage where test results are written to.
     * In the form "gs://bucket/path/to/somewhere".
     * </pre>
     *
     * <code>string gcs_path = 4;</code>
     * @return The bytes for gcsPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGcsPathBytes() {
      return instance.getGcsPathBytes();
    }
    /**
     * <pre>
     * Location in Google Cloud Storage where test results are written to.
     * In the form "gs://bucket/path/to/somewhere".
     * </pre>
     *
     * <code>string gcs_path = 4;</code>
     * @param value The gcsPath to set.
     * @return This builder for chaining.
     */
    public Builder setGcsPath(
        java.lang.String value) {
      copyOnWrite();
      instance.setGcsPath(value);
      return this;
    }
    /**
     * <pre>
     * Location in Google Cloud Storage where test results are written to.
     * In the form "gs://bucket/path/to/somewhere".
     * </pre>
     *
     * <code>string gcs_path = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearGcsPath() {
      copyOnWrite();
      instance.clearGcsPath();
      return this;
    }
    /**
     * <pre>
     * Location in Google Cloud Storage where test results are written to.
     * In the form "gs://bucket/path/to/somewhere".
     * </pre>
     *
     * <code>string gcs_path = 4;</code>
     * @param value The bytes for gcsPath to set.
     * @return This builder for chaining.
     */
    public Builder setGcsPathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setGcsPathBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.firebase.testlab.v1.ResultStorage)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.firebase.testlab.v1.ResultStorage();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "toolResultsHistory_",
            "toolResultsExecution_",
            "resultsUri_",
            "gcsPath_",
          };
          java.lang.String info =
              "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
              "\u0003\u0208\u0004\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.firebase.testlab.v1.ResultStorage> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.firebase.testlab.v1.ResultStorage.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.firebase.testlab.v1.ResultStorage>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.firebase.testlab.v1.ResultStorage)
  private static final google.events.firebase.testlab.v1.ResultStorage DEFAULT_INSTANCE;
  static {
    ResultStorage defaultInstance = new ResultStorage();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ResultStorage.class, defaultInstance);
  }

  public static google.events.firebase.testlab.v1.ResultStorage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ResultStorage> PARSER;

  public static com.google.protobuf.Parser<ResultStorage> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

