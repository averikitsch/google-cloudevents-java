// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/iot/v1/data.proto

package google.events.cloud.iot.v1;

/**
 * <pre>
 * A server-stored device credential used for authentication.
 * </pre>
 *
 * Protobuf type {@code google.events.cloud.iot.v1.DeviceCredential}
 */
public  final class DeviceCredential extends
    com.google.protobuf.GeneratedMessageLite<
        DeviceCredential, DeviceCredential.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.cloud.iot.v1.DeviceCredential)
    DeviceCredentialOrBuilder {
  private DeviceCredential() {
  }
  private int credentialCase_ = 0;
  private java.lang.Object credential_;
  public enum CredentialCase {
    PUBLIC_KEY(2),
    CREDENTIAL_NOT_SET(0);
    private final int value;
    private CredentialCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CredentialCase valueOf(int value) {
      return forNumber(value);
    }

    public static CredentialCase forNumber(int value) {
      switch (value) {
        case 2: return PUBLIC_KEY;
        case 0: return CREDENTIAL_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public CredentialCase
  getCredentialCase() {
    return CredentialCase.forNumber(
        credentialCase_);
  }

  private void clearCredential() {
    credentialCase_ = 0;
    credential_ = null;
  }

  public static final int PUBLIC_KEY_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  @java.lang.Override
  public boolean hasPublicKey() {
    return credentialCase_ == 2;
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  @java.lang.Override
  public google.events.cloud.iot.v1.PublicKeyCredential getPublicKey() {
    if (credentialCase_ == 2) {
       return (google.events.cloud.iot.v1.PublicKeyCredential) credential_;
    }
    return google.events.cloud.iot.v1.PublicKeyCredential.getDefaultInstance();
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  private void setPublicKey(google.events.cloud.iot.v1.PublicKeyCredential value) {
    value.getClass();
  credential_ = value;
    credentialCase_ = 2;
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  private void mergePublicKey(google.events.cloud.iot.v1.PublicKeyCredential value) {
    value.getClass();
  if (credentialCase_ == 2 &&
        credential_ != google.events.cloud.iot.v1.PublicKeyCredential.getDefaultInstance()) {
      credential_ = google.events.cloud.iot.v1.PublicKeyCredential.newBuilder((google.events.cloud.iot.v1.PublicKeyCredential) credential_)
          .mergeFrom(value).buildPartial();
    } else {
      credential_ = value;
    }
    credentialCase_ = 2;
  }
  /**
   * <pre>
   * A public key used to verify the signature of JSON Web Tokens (JWTs).
   * When adding a new device credential, either via device creation or via
   * modifications, this public key credential may be required to be signed by
   * one of the registry level certificates. More specifically, if the
   * registry contains at least one certificate, any new device credential
   * must be signed by one of the registry certificates. As a result,
   * when the registry contains certificates, only X.509 certificates are
   * accepted as device credentials. However, if the registry does
   * not contain a certificate, self-signed certificates and public keys will
   * be accepted. New device credentials must be different from every
   * registry-level certificate.
   * </pre>
   *
   * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
   */
  private void clearPublicKey() {
    if (credentialCase_ == 2) {
      credentialCase_ = 0;
      credential_ = null;
    }
  }

  public static final int EXPIRATION_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp expirationTime_;
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  @java.lang.Override
  public boolean hasExpirationTime() {
    return expirationTime_ != null;
  }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getExpirationTime() {
    return expirationTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : expirationTime_;
  }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  private void setExpirationTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  expirationTime_ = value;
    
    }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeExpirationTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  if (expirationTime_ != null &&
        expirationTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      expirationTime_ =
        com.google.protobuf.Timestamp.newBuilder(expirationTime_).mergeFrom(value).buildPartial();
    } else {
      expirationTime_ = value;
    }
    
  }
  /**
   * <pre>
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
   */
  private void clearExpirationTime() {  expirationTime_ = null;
    
  }

  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.iot.v1.DeviceCredential parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.cloud.iot.v1.DeviceCredential prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A server-stored device credential used for authentication.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.iot.v1.DeviceCredential}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.cloud.iot.v1.DeviceCredential, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.cloud.iot.v1.DeviceCredential)
      google.events.cloud.iot.v1.DeviceCredentialOrBuilder {
    // Construct using google.events.cloud.iot.v1.DeviceCredential.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public CredentialCase
        getCredentialCase() {
      return instance.getCredentialCase();
    }

    public Builder clearCredential() {
      copyOnWrite();
      instance.clearCredential();
      return this;
    }


    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    @java.lang.Override
    public boolean hasPublicKey() {
      return instance.hasPublicKey();
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    @java.lang.Override
    public google.events.cloud.iot.v1.PublicKeyCredential getPublicKey() {
      return instance.getPublicKey();
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder setPublicKey(google.events.cloud.iot.v1.PublicKeyCredential value) {
      copyOnWrite();
      instance.setPublicKey(value);
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder setPublicKey(
        google.events.cloud.iot.v1.PublicKeyCredential.Builder builderForValue) {
      copyOnWrite();
      instance.setPublicKey(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder mergePublicKey(google.events.cloud.iot.v1.PublicKeyCredential value) {
      copyOnWrite();
      instance.mergePublicKey(value);
      return this;
    }
    /**
     * <pre>
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     * </pre>
     *
     * <code>.google.events.cloud.iot.v1.PublicKeyCredential public_key = 2;</code>
     */
    public Builder clearPublicKey() {
      copyOnWrite();
      instance.clearPublicKey();
      return this;
    }

    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    @java.lang.Override
    public boolean hasExpirationTime() {
      return instance.hasExpirationTime();
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getExpirationTime() {
      return instance.getExpirationTime();
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder setExpirationTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setExpirationTime(value);
      return this;
      }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder setExpirationTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setExpirationTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder mergeExpirationTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeExpirationTime(value);
      return this;
    }
    /**
     * <pre>
     * [Optional] The time at which this credential becomes invalid. This
     * credential will be ignored for new client authentication requests after
     * this timestamp; however, it will not be automatically deleted.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration_time = 6;</code>
     */
    public Builder clearExpirationTime() {  copyOnWrite();
      instance.clearExpirationTime();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.cloud.iot.v1.DeviceCredential)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.cloud.iot.v1.DeviceCredential();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "credential_",
            "credentialCase_",
            google.events.cloud.iot.v1.PublicKeyCredential.class,
            "expirationTime_",
          };
          java.lang.String info =
              "\u0000\u0002\u0001\u0000\u0002\u0006\u0002\u0000\u0000\u0000\u0002<\u0000\u0006\t" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.cloud.iot.v1.DeviceCredential> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.cloud.iot.v1.DeviceCredential.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.cloud.iot.v1.DeviceCredential>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.cloud.iot.v1.DeviceCredential)
  private static final google.events.cloud.iot.v1.DeviceCredential DEFAULT_INSTANCE;
  static {
    DeviceCredential defaultInstance = new DeviceCredential();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      DeviceCredential.class, defaultInstance);
  }

  public static google.events.cloud.iot.v1.DeviceCredential getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DeviceCredential> PARSER;

  public static com.google.protobuf.Parser<DeviceCredential> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

