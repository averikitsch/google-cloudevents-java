// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/firestore/v1/data.proto

package google.events.cloud.firestore.v1;

/**
 * <pre>
 * The data within all Firestore document events.
 * </pre>
 *
 * Protobuf type {@code google.events.cloud.firestore.v1.DocumentEventData}
 */
public  final class DocumentEventData extends
    com.google.protobuf.GeneratedMessageLite<
        DocumentEventData, DocumentEventData.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.cloud.firestore.v1.DocumentEventData)
    DocumentEventDataOrBuilder {
  private DocumentEventData() {
  }
  public static final int VALUE_FIELD_NUMBER = 1;
  private google.events.cloud.firestore.v1.Document value_;
  /**
   * <pre>
   * A Document object containing a post-operation document snapshot.
   * This is not populated for delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
   */
  @java.lang.Override
  public boolean hasValue() {
    return value_ != null;
  }
  /**
   * <pre>
   * A Document object containing a post-operation document snapshot.
   * This is not populated for delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
   */
  @java.lang.Override
  public google.events.cloud.firestore.v1.Document getValue() {
    return value_ == null ? google.events.cloud.firestore.v1.Document.getDefaultInstance() : value_;
  }
  /**
   * <pre>
   * A Document object containing a post-operation document snapshot.
   * This is not populated for delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
   */
  private void setValue(google.events.cloud.firestore.v1.Document value) {
    value.getClass();
  value_ = value;
    
    }
  /**
   * <pre>
   * A Document object containing a post-operation document snapshot.
   * This is not populated for delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeValue(google.events.cloud.firestore.v1.Document value) {
    value.getClass();
  if (value_ != null &&
        value_ != google.events.cloud.firestore.v1.Document.getDefaultInstance()) {
      value_ =
        google.events.cloud.firestore.v1.Document.newBuilder(value_).mergeFrom(value).buildPartial();
    } else {
      value_ = value;
    }
    
  }
  /**
   * <pre>
   * A Document object containing a post-operation document snapshot.
   * This is not populated for delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
   */
  private void clearValue() {  value_ = null;
    
  }

  public static final int OLD_VALUE_FIELD_NUMBER = 2;
  private google.events.cloud.firestore.v1.Document oldValue_;
  /**
   * <pre>
   * A Document object containing a pre-operation document snapshot.
   * This is only populated for update and delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
   */
  @java.lang.Override
  public boolean hasOldValue() {
    return oldValue_ != null;
  }
  /**
   * <pre>
   * A Document object containing a pre-operation document snapshot.
   * This is only populated for update and delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
   */
  @java.lang.Override
  public google.events.cloud.firestore.v1.Document getOldValue() {
    return oldValue_ == null ? google.events.cloud.firestore.v1.Document.getDefaultInstance() : oldValue_;
  }
  /**
   * <pre>
   * A Document object containing a pre-operation document snapshot.
   * This is only populated for update and delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
   */
  private void setOldValue(google.events.cloud.firestore.v1.Document value) {
    value.getClass();
  oldValue_ = value;
    
    }
  /**
   * <pre>
   * A Document object containing a pre-operation document snapshot.
   * This is only populated for update and delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeOldValue(google.events.cloud.firestore.v1.Document value) {
    value.getClass();
  if (oldValue_ != null &&
        oldValue_ != google.events.cloud.firestore.v1.Document.getDefaultInstance()) {
      oldValue_ =
        google.events.cloud.firestore.v1.Document.newBuilder(oldValue_).mergeFrom(value).buildPartial();
    } else {
      oldValue_ = value;
    }
    
  }
  /**
   * <pre>
   * A Document object containing a pre-operation document snapshot.
   * This is only populated for update and delete events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
   */
  private void clearOldValue() {  oldValue_ = null;
    
  }

  public static final int UPDATE_MASK_FIELD_NUMBER = 3;
  private google.events.cloud.firestore.v1.DocumentMask updateMask_;
  /**
   * <pre>
   * A DocumentMask object that lists changed fields.
   * This is only populated for update events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
   */
  @java.lang.Override
  public boolean hasUpdateMask() {
    return updateMask_ != null;
  }
  /**
   * <pre>
   * A DocumentMask object that lists changed fields.
   * This is only populated for update events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
   */
  @java.lang.Override
  public google.events.cloud.firestore.v1.DocumentMask getUpdateMask() {
    return updateMask_ == null ? google.events.cloud.firestore.v1.DocumentMask.getDefaultInstance() : updateMask_;
  }
  /**
   * <pre>
   * A DocumentMask object that lists changed fields.
   * This is only populated for update events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
   */
  private void setUpdateMask(google.events.cloud.firestore.v1.DocumentMask value) {
    value.getClass();
  updateMask_ = value;
    
    }
  /**
   * <pre>
   * A DocumentMask object that lists changed fields.
   * This is only populated for update events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeUpdateMask(google.events.cloud.firestore.v1.DocumentMask value) {
    value.getClass();
  if (updateMask_ != null &&
        updateMask_ != google.events.cloud.firestore.v1.DocumentMask.getDefaultInstance()) {
      updateMask_ =
        google.events.cloud.firestore.v1.DocumentMask.newBuilder(updateMask_).mergeFrom(value).buildPartial();
    } else {
      updateMask_ = value;
    }
    
  }
  /**
   * <pre>
   * A DocumentMask object that lists changed fields.
   * This is only populated for update events.
   * </pre>
   *
   * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
   */
  private void clearUpdateMask() {  updateMask_ = null;
    
  }

  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.firestore.v1.DocumentEventData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.cloud.firestore.v1.DocumentEventData prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * The data within all Firestore document events.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.firestore.v1.DocumentEventData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.cloud.firestore.v1.DocumentEventData, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.cloud.firestore.v1.DocumentEventData)
      google.events.cloud.firestore.v1.DocumentEventDataOrBuilder {
    // Construct using google.events.cloud.firestore.v1.DocumentEventData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    @java.lang.Override
    public boolean hasValue() {
      return instance.hasValue();
    }
    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    @java.lang.Override
    public google.events.cloud.firestore.v1.Document getValue() {
      return instance.getValue();
    }
    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    public Builder setValue(google.events.cloud.firestore.v1.Document value) {
      copyOnWrite();
      instance.setValue(value);
      return this;
      }
    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    public Builder setValue(
        google.events.cloud.firestore.v1.Document.Builder builderForValue) {
      copyOnWrite();
      instance.setValue(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    public Builder mergeValue(google.events.cloud.firestore.v1.Document value) {
      copyOnWrite();
      instance.mergeValue(value);
      return this;
    }
    /**
     * <pre>
     * A Document object containing a post-operation document snapshot.
     * This is not populated for delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document value = 1;</code>
     */
    public Builder clearValue() {  copyOnWrite();
      instance.clearValue();
      return this;
    }

    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    @java.lang.Override
    public boolean hasOldValue() {
      return instance.hasOldValue();
    }
    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    @java.lang.Override
    public google.events.cloud.firestore.v1.Document getOldValue() {
      return instance.getOldValue();
    }
    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    public Builder setOldValue(google.events.cloud.firestore.v1.Document value) {
      copyOnWrite();
      instance.setOldValue(value);
      return this;
      }
    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    public Builder setOldValue(
        google.events.cloud.firestore.v1.Document.Builder builderForValue) {
      copyOnWrite();
      instance.setOldValue(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    public Builder mergeOldValue(google.events.cloud.firestore.v1.Document value) {
      copyOnWrite();
      instance.mergeOldValue(value);
      return this;
    }
    /**
     * <pre>
     * A Document object containing a pre-operation document snapshot.
     * This is only populated for update and delete events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.Document old_value = 2;</code>
     */
    public Builder clearOldValue() {  copyOnWrite();
      instance.clearOldValue();
      return this;
    }

    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    @java.lang.Override
    public boolean hasUpdateMask() {
      return instance.hasUpdateMask();
    }
    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    @java.lang.Override
    public google.events.cloud.firestore.v1.DocumentMask getUpdateMask() {
      return instance.getUpdateMask();
    }
    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    public Builder setUpdateMask(google.events.cloud.firestore.v1.DocumentMask value) {
      copyOnWrite();
      instance.setUpdateMask(value);
      return this;
      }
    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    public Builder setUpdateMask(
        google.events.cloud.firestore.v1.DocumentMask.Builder builderForValue) {
      copyOnWrite();
      instance.setUpdateMask(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    public Builder mergeUpdateMask(google.events.cloud.firestore.v1.DocumentMask value) {
      copyOnWrite();
      instance.mergeUpdateMask(value);
      return this;
    }
    /**
     * <pre>
     * A DocumentMask object that lists changed fields.
     * This is only populated for update events.
     * </pre>
     *
     * <code>.google.events.cloud.firestore.v1.DocumentMask update_mask = 3;</code>
     */
    public Builder clearUpdateMask() {  copyOnWrite();
      instance.clearUpdateMask();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.cloud.firestore.v1.DocumentEventData)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.cloud.firestore.v1.DocumentEventData();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "value_",
            "oldValue_",
            "updateMask_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\t\u0002\t\u0003" +
              "\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.cloud.firestore.v1.DocumentEventData> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.cloud.firestore.v1.DocumentEventData.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.cloud.firestore.v1.DocumentEventData>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.cloud.firestore.v1.DocumentEventData)
  private static final google.events.cloud.firestore.v1.DocumentEventData DEFAULT_INSTANCE;
  static {
    DocumentEventData defaultInstance = new DocumentEventData();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      DocumentEventData.class, defaultInstance);
  }

  public static google.events.cloud.firestore.v1.DocumentEventData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DocumentEventData> PARSER;

  public static com.google.protobuf.Parser<DocumentEventData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

