// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/audit/v1/data.proto

package google.events.cloud.audit.v1;

/**
 * <pre>
 * Additional information used to correlate multiple LogEntries. Used when a
 * single LogEntry would exceed the Google Cloud Logging size limit and is split
 * across multiple entries.
 * </pre>
 *
 * Protobuf type {@code google.events.cloud.audit.v1.LogSplit}
 */
public  final class LogSplit extends
    com.google.protobuf.GeneratedMessageLite<
        LogSplit, LogSplit.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.cloud.audit.v1.LogSplit)
    LogSplitOrBuilder {
  private LogSplit() {
    uid_ = "";
  }
  public static final int UID_FIELD_NUMBER = 1;
  private java.lang.String uid_;
  /**
   * <pre>
   * A globally unique identifier for all LogEntries in a sequence of split
   * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
   * the same sequence of split logs.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @return The uid.
   */
  @java.lang.Override
  public java.lang.String getUid() {
    return uid_;
  }
  /**
   * <pre>
   * A globally unique identifier for all LogEntries in a sequence of split
   * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
   * the same sequence of split logs.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @return The bytes for uid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(uid_);
  }
  /**
   * <pre>
   * A globally unique identifier for all LogEntries in a sequence of split
   * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
   * the same sequence of split logs.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @param value The uid to set.
   */
  private void setUid(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    uid_ = value;
  }
  /**
   * <pre>
   * A globally unique identifier for all LogEntries in a sequence of split
   * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
   * the same sequence of split logs.
   * </pre>
   *
   * <code>string uid = 1;</code>
   */
  private void clearUid() {
    
    uid_ = getDefaultInstance().getUid();
  }
  /**
   * <pre>
   * A globally unique identifier for all LogEntries in a sequence of split
   * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
   * the same sequence of split logs.
   * </pre>
   *
   * <code>string uid = 1;</code>
   * @param value The bytes for uid to set.
   */
  private void setUidBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    uid_ = value.toStringUtf8();
    
  }

  public static final int INDEX_FIELD_NUMBER = 2;
  private int index_;
  /**
   * <pre>
   * The index of this LogEntry in the sequence of split logs. LogEntries are
   * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
   * </pre>
   *
   * <code>int32 index = 2;</code>
   * @return The index.
   */
  @java.lang.Override
  public int getIndex() {
    return index_;
  }
  /**
   * <pre>
   * The index of this LogEntry in the sequence of split logs. LogEntries are
   * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
   * </pre>
   *
   * <code>int32 index = 2;</code>
   * @param value The index to set.
   */
  private void setIndex(int value) {
    
    index_ = value;
  }
  /**
   * <pre>
   * The index of this LogEntry in the sequence of split logs. LogEntries are
   * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
   * </pre>
   *
   * <code>int32 index = 2;</code>
   */
  private void clearIndex() {
    
    index_ = 0;
  }

  public static final int TOTAL_SPLITS_FIELD_NUMBER = 3;
  private int totalSplits_;
  /**
   * <pre>
   * The total number of logs that the original LogEntry was split into.
   * </pre>
   *
   * <code>int32 total_splits = 3;</code>
   * @return The totalSplits.
   */
  @java.lang.Override
  public int getTotalSplits() {
    return totalSplits_;
  }
  /**
   * <pre>
   * The total number of logs that the original LogEntry was split into.
   * </pre>
   *
   * <code>int32 total_splits = 3;</code>
   * @param value The totalSplits to set.
   */
  private void setTotalSplits(int value) {
    
    totalSplits_ = value;
  }
  /**
   * <pre>
   * The total number of logs that the original LogEntry was split into.
   * </pre>
   *
   * <code>int32 total_splits = 3;</code>
   */
  private void clearTotalSplits() {
    
    totalSplits_ = 0;
  }

  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.audit.v1.LogSplit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.audit.v1.LogSplit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.audit.v1.LogSplit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.cloud.audit.v1.LogSplit prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Additional information used to correlate multiple LogEntries. Used when a
   * single LogEntry would exceed the Google Cloud Logging size limit and is split
   * across multiple entries.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.audit.v1.LogSplit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.cloud.audit.v1.LogSplit, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.cloud.audit.v1.LogSplit)
      google.events.cloud.audit.v1.LogSplitOrBuilder {
    // Construct using google.events.cloud.audit.v1.LogSplit.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A globally unique identifier for all LogEntries in a sequence of split
     * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
     * the same sequence of split logs.
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      return instance.getUid();
    }
    /**
     * <pre>
     * A globally unique identifier for all LogEntries in a sequence of split
     * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
     * the same sequence of split logs.
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      return instance.getUidBytes();
    }
    /**
     * <pre>
     * A globally unique identifier for all LogEntries in a sequence of split
     * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
     * the same sequence of split logs.
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @param value The uid to set.
     * @return This builder for chaining.
     */
    public Builder setUid(
        java.lang.String value) {
      copyOnWrite();
      instance.setUid(value);
      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for all LogEntries in a sequence of split
     * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
     * the same sequence of split logs.
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUid() {
      copyOnWrite();
      instance.clearUid();
      return this;
    }
    /**
     * <pre>
     * A globally unique identifier for all LogEntries in a sequence of split
     * logs. All LogEntries with the same |LogSplit.uid| are assumed to be part of
     * the same sequence of split logs.
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @param value The bytes for uid to set.
     * @return This builder for chaining.
     */
    public Builder setUidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUidBytes(value);
      return this;
    }

    /**
     * <pre>
     * The index of this LogEntry in the sequence of split logs. LogEntries are
     * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
     * </pre>
     *
     * <code>int32 index = 2;</code>
     * @return The index.
     */
    @java.lang.Override
    public int getIndex() {
      return instance.getIndex();
    }
    /**
     * <pre>
     * The index of this LogEntry in the sequence of split logs. LogEntries are
     * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
     * </pre>
     *
     * <code>int32 index = 2;</code>
     * @param value The index to set.
     * @return This builder for chaining.
     */
    public Builder setIndex(int value) {
      copyOnWrite();
      instance.setIndex(value);
      return this;
    }
    /**
     * <pre>
     * The index of this LogEntry in the sequence of split logs. LogEntries are
     * given |index| values 0, 1, ..., n-1 for a sequence of n entries.
     * </pre>
     *
     * <code>int32 index = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearIndex() {
      copyOnWrite();
      instance.clearIndex();
      return this;
    }

    /**
     * <pre>
     * The total number of logs that the original LogEntry was split into.
     * </pre>
     *
     * <code>int32 total_splits = 3;</code>
     * @return The totalSplits.
     */
    @java.lang.Override
    public int getTotalSplits() {
      return instance.getTotalSplits();
    }
    /**
     * <pre>
     * The total number of logs that the original LogEntry was split into.
     * </pre>
     *
     * <code>int32 total_splits = 3;</code>
     * @param value The totalSplits to set.
     * @return This builder for chaining.
     */
    public Builder setTotalSplits(int value) {
      copyOnWrite();
      instance.setTotalSplits(value);
      return this;
    }
    /**
     * <pre>
     * The total number of logs that the original LogEntry was split into.
     * </pre>
     *
     * <code>int32 total_splits = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearTotalSplits() {
      copyOnWrite();
      instance.clearTotalSplits();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.cloud.audit.v1.LogSplit)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.cloud.audit.v1.LogSplit();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "uid_",
            "index_",
            "totalSplits_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u0208\u0002\u0004" +
              "\u0003\u0004";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.cloud.audit.v1.LogSplit> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.cloud.audit.v1.LogSplit.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.cloud.audit.v1.LogSplit>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.cloud.audit.v1.LogSplit)
  private static final google.events.cloud.audit.v1.LogSplit DEFAULT_INSTANCE;
  static {
    LogSplit defaultInstance = new LogSplit();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      LogSplit.class, defaultInstance);
  }

  public static google.events.cloud.audit.v1.LogSplit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LogSplit> PARSER;

  public static com.google.protobuf.Parser<LogSplit> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

