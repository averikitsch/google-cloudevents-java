// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/cloudbuild/v1/data.proto

package google.events.cloud.cloudbuild.v1;

/**
 * <pre>
 * Provenance of the source. Ways to find the original source, or verify that
 * some source was used for this build.
 * </pre>
 *
 * Protobuf type {@code google.events.cloud.cloudbuild.v1.SourceProvenance}
 */
public  final class SourceProvenance extends
    com.google.protobuf.GeneratedMessageLite<
        SourceProvenance, SourceProvenance.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.cloud.cloudbuild.v1.SourceProvenance)
    SourceProvenanceOrBuilder {
  private SourceProvenance() {
  }
  public static final int RESOLVED_STORAGE_SOURCE_FIELD_NUMBER = 3;
  private google.events.cloud.cloudbuild.v1.StorageSource resolvedStorageSource_;
  /**
   * <pre>
   * A copy of the build's `source.storage_source`, if exists, with any
   * generations resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
   */
  @java.lang.Override
  public boolean hasResolvedStorageSource() {
    return resolvedStorageSource_ != null;
  }
  /**
   * <pre>
   * A copy of the build's `source.storage_source`, if exists, with any
   * generations resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
   */
  @java.lang.Override
  public google.events.cloud.cloudbuild.v1.StorageSource getResolvedStorageSource() {
    return resolvedStorageSource_ == null ? google.events.cloud.cloudbuild.v1.StorageSource.getDefaultInstance() : resolvedStorageSource_;
  }
  /**
   * <pre>
   * A copy of the build's `source.storage_source`, if exists, with any
   * generations resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
   */
  private void setResolvedStorageSource(google.events.cloud.cloudbuild.v1.StorageSource value) {
    value.getClass();
  resolvedStorageSource_ = value;
    
    }
  /**
   * <pre>
   * A copy of the build's `source.storage_source`, if exists, with any
   * generations resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeResolvedStorageSource(google.events.cloud.cloudbuild.v1.StorageSource value) {
    value.getClass();
  if (resolvedStorageSource_ != null &&
        resolvedStorageSource_ != google.events.cloud.cloudbuild.v1.StorageSource.getDefaultInstance()) {
      resolvedStorageSource_ =
        google.events.cloud.cloudbuild.v1.StorageSource.newBuilder(resolvedStorageSource_).mergeFrom(value).buildPartial();
    } else {
      resolvedStorageSource_ = value;
    }
    
  }
  /**
   * <pre>
   * A copy of the build's `source.storage_source`, if exists, with any
   * generations resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
   */
  private void clearResolvedStorageSource() {  resolvedStorageSource_ = null;
    
  }

  public static final int RESOLVED_REPO_SOURCE_FIELD_NUMBER = 6;
  private google.events.cloud.cloudbuild.v1.RepoSource resolvedRepoSource_;
  /**
   * <pre>
   * A copy of the build's `source.repo_source`, if exists, with any
   * revisions resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
   */
  @java.lang.Override
  public boolean hasResolvedRepoSource() {
    return resolvedRepoSource_ != null;
  }
  /**
   * <pre>
   * A copy of the build's `source.repo_source`, if exists, with any
   * revisions resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
   */
  @java.lang.Override
  public google.events.cloud.cloudbuild.v1.RepoSource getResolvedRepoSource() {
    return resolvedRepoSource_ == null ? google.events.cloud.cloudbuild.v1.RepoSource.getDefaultInstance() : resolvedRepoSource_;
  }
  /**
   * <pre>
   * A copy of the build's `source.repo_source`, if exists, with any
   * revisions resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
   */
  private void setResolvedRepoSource(google.events.cloud.cloudbuild.v1.RepoSource value) {
    value.getClass();
  resolvedRepoSource_ = value;
    
    }
  /**
   * <pre>
   * A copy of the build's `source.repo_source`, if exists, with any
   * revisions resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeResolvedRepoSource(google.events.cloud.cloudbuild.v1.RepoSource value) {
    value.getClass();
  if (resolvedRepoSource_ != null &&
        resolvedRepoSource_ != google.events.cloud.cloudbuild.v1.RepoSource.getDefaultInstance()) {
      resolvedRepoSource_ =
        google.events.cloud.cloudbuild.v1.RepoSource.newBuilder(resolvedRepoSource_).mergeFrom(value).buildPartial();
    } else {
      resolvedRepoSource_ = value;
    }
    
  }
  /**
   * <pre>
   * A copy of the build's `source.repo_source`, if exists, with any
   * revisions resolved.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
   */
  private void clearResolvedRepoSource() {  resolvedRepoSource_ = null;
    
  }

  public static final int FILE_HASHES_FIELD_NUMBER = 4;
  private static final class FileHashesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                google.events.cloud.cloudbuild.v1.FileHashes.getDefaultInstance());
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> fileHashes_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes>
  internalGetFileHashes() {
    return fileHashes_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes>
  internalGetMutableFileHashes() {
    if (!fileHashes_.isMutable()) {
      fileHashes_ = fileHashes_.mutableCopy();
    }
    return fileHashes_;
  }
  @java.lang.Override

  public int getFileHashesCount() {
    return internalGetFileHashes().size();
  }
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that
   * the original source integrity was maintained in the build. Note that
   * `FileHashes` will only be populated if `BuildOptions` has requested a
   * `SourceProvenanceHash`.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (`.tar.gz`), the `FileHash` will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
   */
  @java.lang.Override

  public boolean containsFileHashes(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetFileHashes().containsKey(key);
  }
  /**
   * Use {@link #getFileHashesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> getFileHashes() {
    return getFileHashesMap();
  }
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that
   * the original source integrity was maintained in the build. Note that
   * `FileHashes` will only be populated if `BuildOptions` has requested a
   * `SourceProvenanceHash`.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (`.tar.gz`), the `FileHash` will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> getFileHashesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetFileHashes());
  }
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that
   * the original source integrity was maintained in the build. Note that
   * `FileHashes` will only be populated if `BuildOptions` has requested a
   * `SourceProvenanceHash`.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (`.tar.gz`), the `FileHash` will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
   */
  @java.lang.Override

  public google.events.cloud.cloudbuild.v1.FileHashes getFileHashesOrDefault(
      java.lang.String key,
      google.events.cloud.cloudbuild.v1.FileHashes defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> map =
        internalGetFileHashes();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that
   * the original source integrity was maintained in the build. Note that
   * `FileHashes` will only be populated if `BuildOptions` has requested a
   * `SourceProvenanceHash`.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (`.tar.gz`), the `FileHash` will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
   */
  @java.lang.Override

  public google.events.cloud.cloudbuild.v1.FileHashes getFileHashesOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> map =
        internalGetFileHashes();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * Hash(es) of the build source, which can be used to verify that
   * the original source integrity was maintained in the build. Note that
   * `FileHashes` will only be populated if `BuildOptions` has requested a
   * `SourceProvenanceHash`.
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   * If the build source came in a single package such as a gzipped tarfile
   * (`.tar.gz`), the `FileHash` will be for the single path to that file.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
   */
  private java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes>
  getMutableFileHashesMap() {
    return internalGetMutableFileHashes();
  }

  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.SourceProvenance parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.cloud.cloudbuild.v1.SourceProvenance prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Provenance of the source. Ways to find the original source, or verify that
   * some source was used for this build.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.cloudbuild.v1.SourceProvenance}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.cloud.cloudbuild.v1.SourceProvenance, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.cloud.cloudbuild.v1.SourceProvenance)
      google.events.cloud.cloudbuild.v1.SourceProvenanceOrBuilder {
    // Construct using google.events.cloud.cloudbuild.v1.SourceProvenance.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    @java.lang.Override
    public boolean hasResolvedStorageSource() {
      return instance.hasResolvedStorageSource();
    }
    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    @java.lang.Override
    public google.events.cloud.cloudbuild.v1.StorageSource getResolvedStorageSource() {
      return instance.getResolvedStorageSource();
    }
    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    public Builder setResolvedStorageSource(google.events.cloud.cloudbuild.v1.StorageSource value) {
      copyOnWrite();
      instance.setResolvedStorageSource(value);
      return this;
      }
    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    public Builder setResolvedStorageSource(
        google.events.cloud.cloudbuild.v1.StorageSource.Builder builderForValue) {
      copyOnWrite();
      instance.setResolvedStorageSource(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    public Builder mergeResolvedStorageSource(google.events.cloud.cloudbuild.v1.StorageSource value) {
      copyOnWrite();
      instance.mergeResolvedStorageSource(value);
      return this;
    }
    /**
     * <pre>
     * A copy of the build's `source.storage_source`, if exists, with any
     * generations resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.StorageSource resolved_storage_source = 3;</code>
     */
    public Builder clearResolvedStorageSource() {  copyOnWrite();
      instance.clearResolvedStorageSource();
      return this;
    }

    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    @java.lang.Override
    public boolean hasResolvedRepoSource() {
      return instance.hasResolvedRepoSource();
    }
    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    @java.lang.Override
    public google.events.cloud.cloudbuild.v1.RepoSource getResolvedRepoSource() {
      return instance.getResolvedRepoSource();
    }
    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    public Builder setResolvedRepoSource(google.events.cloud.cloudbuild.v1.RepoSource value) {
      copyOnWrite();
      instance.setResolvedRepoSource(value);
      return this;
      }
    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    public Builder setResolvedRepoSource(
        google.events.cloud.cloudbuild.v1.RepoSource.Builder builderForValue) {
      copyOnWrite();
      instance.setResolvedRepoSource(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    public Builder mergeResolvedRepoSource(google.events.cloud.cloudbuild.v1.RepoSource value) {
      copyOnWrite();
      instance.mergeResolvedRepoSource(value);
      return this;
    }
    /**
     * <pre>
     * A copy of the build's `source.repo_source`, if exists, with any
     * revisions resolved.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.RepoSource resolved_repo_source = 6;</code>
     */
    public Builder clearResolvedRepoSource() {  copyOnWrite();
      instance.clearResolvedRepoSource();
      return this;
    }

    @java.lang.Override

    public int getFileHashesCount() {
      return instance.getFileHashesMap().size();
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    @java.lang.Override

    public boolean containsFileHashes(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getFileHashesMap().containsKey(key);
    }

    public Builder clearFileHashes() {
      copyOnWrite();
      instance.getMutableFileHashesMap().clear();
      return this;
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */

    public Builder removeFileHashes(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableFileHashesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getFileHashesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> getFileHashes() {
      return getFileHashesMap();
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> getFileHashesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getFileHashesMap());
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    @java.lang.Override

    public google.events.cloud.cloudbuild.v1.FileHashes getFileHashesOrDefault(
        java.lang.String key,
        google.events.cloud.cloudbuild.v1.FileHashes defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> map =
          instance.getFileHashesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    @java.lang.Override

    public google.events.cloud.cloudbuild.v1.FileHashes getFileHashesOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> map =
          instance.getFileHashesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    public Builder putFileHashes(
        java.lang.String key,
        google.events.cloud.cloudbuild.v1.FileHashes value) {
      java.lang.Class<?> keyClass = key.getClass();
      java.lang.Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableFileHashesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * Hash(es) of the build source, which can be used to verify that
     * the original source integrity was maintained in the build. Note that
     * `FileHashes` will only be populated if `BuildOptions` has requested a
     * `SourceProvenanceHash`.
     * The keys to this map are file paths used as build source and the values
     * contain the hash values for those files.
     * If the build source came in a single package such as a gzipped tarfile
     * (`.tar.gz`), the `FileHash` will be for the single path to that file.
     * </pre>
     *
     * <code>map&lt;string, .google.events.cloud.cloudbuild.v1.FileHashes&gt; file_hashes = 4;</code>
     */
    public Builder putAllFileHashes(
        java.util.Map<java.lang.String, google.events.cloud.cloudbuild.v1.FileHashes> values) {
      copyOnWrite();
      instance.getMutableFileHashesMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.cloud.cloudbuild.v1.SourceProvenance)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.cloud.cloudbuild.v1.SourceProvenance();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "resolvedStorageSource_",
            "fileHashes_",
            FileHashesDefaultEntryHolder.defaultEntry,
            "resolvedRepoSource_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0003\u0006\u0003\u0001\u0000\u0000\u0003\t\u00042\u0006" +
              "\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.cloud.cloudbuild.v1.SourceProvenance> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.cloud.cloudbuild.v1.SourceProvenance.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.cloud.cloudbuild.v1.SourceProvenance>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.cloud.cloudbuild.v1.SourceProvenance)
  private static final google.events.cloud.cloudbuild.v1.SourceProvenance DEFAULT_INSTANCE;
  static {
    SourceProvenance defaultInstance = new SourceProvenance();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SourceProvenance.class, defaultInstance);
  }

  public static google.events.cloud.cloudbuild.v1.SourceProvenance getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SourceProvenance> PARSER;

  public static com.google.protobuf.Parser<SourceProvenance> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

