// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/cloudbuild/v1/data.proto

package google.events.cloud.cloudbuild.v1;

/**
 * <pre>
 * Artifacts produced by a build that should be uploaded upon
 * successful completion of all build steps.
 * </pre>
 *
 * Protobuf type {@code google.events.cloud.cloudbuild.v1.Artifacts}
 */
public  final class Artifacts extends
    com.google.protobuf.GeneratedMessageLite<
        Artifacts, Artifacts.Builder> implements
    // @@protoc_insertion_point(message_implements:google.events.cloud.cloudbuild.v1.Artifacts)
    ArtifactsOrBuilder {
  private Artifacts() {
    images_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  public interface ArtifactObjectsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @return The location.
     */
    java.lang.String getLocation();
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @return The bytes for location.
     */
    com.google.protobuf.ByteString
        getLocationBytes();

    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @return A list containing the paths.
     */
    java.util.List<java.lang.String>
        getPathsList();
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @return The count of paths.
     */
    int getPathsCount();
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    java.lang.String getPaths(int index);
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    com.google.protobuf.ByteString
        getPathsBytes(int index);

    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     * @return Whether the timing field is set.
     */
    boolean hasTiming();
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     * @return The timing.
     */
    google.events.cloud.cloudbuild.v1.TimeSpan getTiming();
  }
  /**
   * <pre>
   * Files in the workspace to upload to Cloud Storage upon successful
   * completion of all build steps.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects}
   */
  public  static final class ArtifactObjects extends
      com.google.protobuf.GeneratedMessageLite<
          ArtifactObjects, ArtifactObjects.Builder> implements
      // @@protoc_insertion_point(message_implements:google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects)
      ArtifactObjectsOrBuilder {
    private ArtifactObjects() {
      location_ = "";
      paths_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    public static final int LOCATION_FIELD_NUMBER = 1;
    private java.lang.String location_;
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @return The location.
     */
    @java.lang.Override
    public java.lang.String getLocation() {
      return location_;
    }
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @return The bytes for location.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLocationBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(location_);
    }
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @param value The location to set.
     */
    private void setLocation(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      location_ = value;
    }
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     */
    private void clearLocation() {
      
      location_ = getDefaultInstance().getLocation();
    }
    /**
     * <pre>
     * Cloud Storage bucket and optional object path, in the form
     * "gs://bucket/path/to/somewhere/". (see [Bucket Name
     * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
     * Files in the workspace matching any path pattern will be uploaded to
     * Cloud Storage with this location as a prefix.
     * </pre>
     *
     * <code>string location = 1;</code>
     * @param value The bytes for location to set.
     */
    private void setLocationBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      location_ = value.toStringUtf8();
      
    }

    public static final int PATHS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> paths_;
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @return A list containing the paths.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getPathsList() {
      return paths_;
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @return The count of paths.
     */
    @java.lang.Override
    public int getPathsCount() {
      return paths_.size();
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param index The index of the element to return.
     * @return The paths at the given index.
     */
    @java.lang.Override
    public java.lang.String getPaths(int index) {
      return paths_.get(index);
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the paths at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          paths_.get(index));
    }
    private void ensurePathsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          paths_;  if (!tmp.isModifiable()) {
        paths_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param index The index to set the value at.
     * @param value The paths to set.
     */
    private void setPaths(
        int index, java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensurePathsIsMutable();
      paths_.set(index, value);
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param value The paths to add.
     */
    private void addPaths(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensurePathsIsMutable();
      paths_.add(value);
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param values The paths to add.
     */
    private void addAllPaths(
        java.lang.Iterable<java.lang.String> values) {
      ensurePathsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, paths_);
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     */
    private void clearPaths() {
      paths_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Path globs used to match files in the build's workspace.
     * </pre>
     *
     * <code>repeated string paths = 2;</code>
     * @param value The bytes of the paths to add.
     */
    private void addPathsBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      ensurePathsIsMutable();
      paths_.add(value.toStringUtf8());
    }

    public static final int TIMING_FIELD_NUMBER = 3;
    private google.events.cloud.cloudbuild.v1.TimeSpan timing_;
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     */
    @java.lang.Override
    public boolean hasTiming() {
      return timing_ != null;
    }
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     */
    @java.lang.Override
    public google.events.cloud.cloudbuild.v1.TimeSpan getTiming() {
      return timing_ == null ? google.events.cloud.cloudbuild.v1.TimeSpan.getDefaultInstance() : timing_;
    }
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     */
    private void setTiming(google.events.cloud.cloudbuild.v1.TimeSpan value) {
      value.getClass();
  timing_ = value;
      
      }
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTiming(google.events.cloud.cloudbuild.v1.TimeSpan value) {
      value.getClass();
  if (timing_ != null &&
          timing_ != google.events.cloud.cloudbuild.v1.TimeSpan.getDefaultInstance()) {
        timing_ =
          google.events.cloud.cloudbuild.v1.TimeSpan.newBuilder(timing_).mergeFrom(value).buildPartial();
      } else {
        timing_ = value;
      }
      
    }
    /**
     * <pre>
     * Stores timing information for pushing all artifact objects.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
     */
    private void clearTiming() {  timing_ = null;
      
    }

    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Files in the workspace to upload to Cloud Storage upon successful
     * completion of all build steps.
     * </pre>
     *
     * Protobuf type {@code google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects)
        google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjectsOrBuilder {
      // Construct using google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Cloud Storage bucket and optional object path, in the form
       * "gs://bucket/path/to/somewhere/". (see [Bucket Name
       * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
       * Files in the workspace matching any path pattern will be uploaded to
       * Cloud Storage with this location as a prefix.
       * </pre>
       *
       * <code>string location = 1;</code>
       * @return The location.
       */
      @java.lang.Override
      public java.lang.String getLocation() {
        return instance.getLocation();
      }
      /**
       * <pre>
       * Cloud Storage bucket and optional object path, in the form
       * "gs://bucket/path/to/somewhere/". (see [Bucket Name
       * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
       * Files in the workspace matching any path pattern will be uploaded to
       * Cloud Storage with this location as a prefix.
       * </pre>
       *
       * <code>string location = 1;</code>
       * @return The bytes for location.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getLocationBytes() {
        return instance.getLocationBytes();
      }
      /**
       * <pre>
       * Cloud Storage bucket and optional object path, in the form
       * "gs://bucket/path/to/somewhere/". (see [Bucket Name
       * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
       * Files in the workspace matching any path pattern will be uploaded to
       * Cloud Storage with this location as a prefix.
       * </pre>
       *
       * <code>string location = 1;</code>
       * @param value The location to set.
       * @return This builder for chaining.
       */
      public Builder setLocation(
          java.lang.String value) {
        copyOnWrite();
        instance.setLocation(value);
        return this;
      }
      /**
       * <pre>
       * Cloud Storage bucket and optional object path, in the form
       * "gs://bucket/path/to/somewhere/". (see [Bucket Name
       * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
       * Files in the workspace matching any path pattern will be uploaded to
       * Cloud Storage with this location as a prefix.
       * </pre>
       *
       * <code>string location = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocation() {
        copyOnWrite();
        instance.clearLocation();
        return this;
      }
      /**
       * <pre>
       * Cloud Storage bucket and optional object path, in the form
       * "gs://bucket/path/to/somewhere/". (see [Bucket Name
       * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
       * Files in the workspace matching any path pattern will be uploaded to
       * Cloud Storage with this location as a prefix.
       * </pre>
       *
       * <code>string location = 1;</code>
       * @param value The bytes for location to set.
       * @return This builder for chaining.
       */
      public Builder setLocationBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLocationBytes(value);
        return this;
      }

      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @return A list containing the paths.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getPathsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPathsList());
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @return The count of paths.
       */
      @java.lang.Override
      public int getPathsCount() {
        return instance.getPathsCount();
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param index The index of the element to return.
       * @return The paths at the given index.
       */
      @java.lang.Override
      public java.lang.String getPaths(int index) {
        return instance.getPaths(index);
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the paths at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPathsBytes(int index) {
        return instance.getPathsBytes(index);
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param index The index to set the value at.
       * @param value The paths to set.
       * @return This builder for chaining.
       */
      public Builder setPaths(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setPaths(index, value);
        return this;
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param value The paths to add.
       * @return This builder for chaining.
       */
      public Builder addPaths(
          java.lang.String value) {
        copyOnWrite();
        instance.addPaths(value);
        return this;
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param values The paths to add.
       * @return This builder for chaining.
       */
      public Builder addAllPaths(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllPaths(values);
        return this;
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPaths() {
        copyOnWrite();
        instance.clearPaths();
        return this;
      }
      /**
       * <pre>
       * Path globs used to match files in the build's workspace.
       * </pre>
       *
       * <code>repeated string paths = 2;</code>
       * @param value The bytes of the paths to add.
       * @return This builder for chaining.
       */
      public Builder addPathsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addPathsBytes(value);
        return this;
      }

      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      @java.lang.Override
      public boolean hasTiming() {
        return instance.hasTiming();
      }
      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      @java.lang.Override
      public google.events.cloud.cloudbuild.v1.TimeSpan getTiming() {
        return instance.getTiming();
      }
      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      public Builder setTiming(google.events.cloud.cloudbuild.v1.TimeSpan value) {
        copyOnWrite();
        instance.setTiming(value);
        return this;
        }
      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      public Builder setTiming(
          google.events.cloud.cloudbuild.v1.TimeSpan.Builder builderForValue) {
        copyOnWrite();
        instance.setTiming(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      public Builder mergeTiming(google.events.cloud.cloudbuild.v1.TimeSpan value) {
        copyOnWrite();
        instance.mergeTiming(value);
        return this;
      }
      /**
       * <pre>
       * Stores timing information for pushing all artifact objects.
       * </pre>
       *
       * <code>.google.events.cloud.cloudbuild.v1.TimeSpan timing = 3;</code>
       */
      public Builder clearTiming() {  copyOnWrite();
        instance.clearTiming();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "location_",
              "paths_",
              "timing_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u0208\u0002\u021a" +
                "\u0003\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects> parser = PARSER;
          if (parser == null) {
            synchronized (google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects)
    private static final google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects DEFAULT_INSTANCE;
    static {
      ArtifactObjects defaultInstance = new ArtifactObjects();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ArtifactObjects.class, defaultInstance);
    }

    public static google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ArtifactObjects> PARSER;

    public static com.google.protobuf.Parser<ArtifactObjects> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int IMAGES_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<java.lang.String> images_;
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @return A list containing the images.
   */
  @java.lang.Override
  public java.util.List<java.lang.String> getImagesList() {
    return images_;
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @return The count of images.
   */
  @java.lang.Override
  public int getImagesCount() {
    return images_.size();
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param index The index of the element to return.
   * @return The images at the given index.
   */
  @java.lang.Override
  public java.lang.String getImages(int index) {
    return images_.get(index);
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the images at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getImagesBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        images_.get(index));
  }
  private void ensureImagesIsMutable() {
    com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
        images_;  if (!tmp.isModifiable()) {
      images_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param index The index to set the value at.
   * @param value The images to set.
   */
  private void setImages(
      int index, java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  ensureImagesIsMutable();
    images_.set(index, value);
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param value The images to add.
   */
  private void addImages(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  ensureImagesIsMutable();
    images_.add(value);
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param values The images to add.
   */
  private void addAllImages(
      java.lang.Iterable<java.lang.String> values) {
    ensureImagesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, images_);
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   */
  private void clearImages() {
    images_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * A list of images to be pushed upon the successful completion of all build
   * steps.
   * The images will be pushed using the builder service account's credentials.
   * The digests of the pushed images will be stored in the Build resource's
   * results field.
   * If any of the images fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>repeated string images = 1;</code>
   * @param value The bytes of the images to add.
   */
  private void addImagesBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    ensureImagesIsMutable();
    images_.add(value.toStringUtf8());
  }

  public static final int OBJECTS_FIELD_NUMBER = 2;
  private google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects_;
  /**
   * <pre>
   * A list of objects to be uploaded to Cloud Storage upon successful
   * completion of all build steps.
   * Files in the workspace matching specified paths globs will be uploaded to
   * the specified Cloud Storage location using the builder service account's
   * credentials.
   * The location and generation of the uploaded objects will be stored in the
   * Build resource's results field.
   * If any objects fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
   */
  @java.lang.Override
  public boolean hasObjects() {
    return objects_ != null;
  }
  /**
   * <pre>
   * A list of objects to be uploaded to Cloud Storage upon successful
   * completion of all build steps.
   * Files in the workspace matching specified paths globs will be uploaded to
   * the specified Cloud Storage location using the builder service account's
   * credentials.
   * The location and generation of the uploaded objects will be stored in the
   * Build resource's results field.
   * If any objects fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
   */
  @java.lang.Override
  public google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects getObjects() {
    return objects_ == null ? google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.getDefaultInstance() : objects_;
  }
  /**
   * <pre>
   * A list of objects to be uploaded to Cloud Storage upon successful
   * completion of all build steps.
   * Files in the workspace matching specified paths globs will be uploaded to
   * the specified Cloud Storage location using the builder service account's
   * credentials.
   * The location and generation of the uploaded objects will be stored in the
   * Build resource's results field.
   * If any objects fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
   */
  private void setObjects(google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects value) {
    value.getClass();
  objects_ = value;
    
    }
  /**
   * <pre>
   * A list of objects to be uploaded to Cloud Storage upon successful
   * completion of all build steps.
   * Files in the workspace matching specified paths globs will be uploaded to
   * the specified Cloud Storage location using the builder service account's
   * credentials.
   * The location and generation of the uploaded objects will be stored in the
   * Build resource's results field.
   * If any objects fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeObjects(google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects value) {
    value.getClass();
  if (objects_ != null &&
        objects_ != google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.getDefaultInstance()) {
      objects_ =
        google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.newBuilder(objects_).mergeFrom(value).buildPartial();
    } else {
      objects_ = value;
    }
    
  }
  /**
   * <pre>
   * A list of objects to be uploaded to Cloud Storage upon successful
   * completion of all build steps.
   * Files in the workspace matching specified paths globs will be uploaded to
   * the specified Cloud Storage location using the builder service account's
   * credentials.
   * The location and generation of the uploaded objects will be stored in the
   * Build resource's results field.
   * If any objects fail to be pushed, the build is marked FAILURE.
   * </pre>
   *
   * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
   */
  private void clearObjects() {  objects_ = null;
    
  }

  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static google.events.cloud.cloudbuild.v1.Artifacts parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(google.events.cloud.cloudbuild.v1.Artifacts prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Artifacts produced by a build that should be uploaded upon
   * successful completion of all build steps.
   * </pre>
   *
   * Protobuf type {@code google.events.cloud.cloudbuild.v1.Artifacts}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        google.events.cloud.cloudbuild.v1.Artifacts, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.events.cloud.cloudbuild.v1.Artifacts)
      google.events.cloud.cloudbuild.v1.ArtifactsOrBuilder {
    // Construct using google.events.cloud.cloudbuild.v1.Artifacts.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @return A list containing the images.
     */
    @java.lang.Override
    public java.util.List<java.lang.String>
        getImagesList() {
      return java.util.Collections.unmodifiableList(
          instance.getImagesList());
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @return The count of images.
     */
    @java.lang.Override
    public int getImagesCount() {
      return instance.getImagesCount();
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param index The index of the element to return.
     * @return The images at the given index.
     */
    @java.lang.Override
    public java.lang.String getImages(int index) {
      return instance.getImages(index);
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the images at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getImagesBytes(int index) {
      return instance.getImagesBytes(index);
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param index The index to set the value at.
     * @param value The images to set.
     * @return This builder for chaining.
     */
    public Builder setImages(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setImages(index, value);
      return this;
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param value The images to add.
     * @return This builder for chaining.
     */
    public Builder addImages(
        java.lang.String value) {
      copyOnWrite();
      instance.addImages(value);
      return this;
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param values The images to add.
     * @return This builder for chaining.
     */
    public Builder addAllImages(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllImages(values);
      return this;
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearImages() {
      copyOnWrite();
      instance.clearImages();
      return this;
    }
    /**
     * <pre>
     * A list of images to be pushed upon the successful completion of all build
     * steps.
     * The images will be pushed using the builder service account's credentials.
     * The digests of the pushed images will be stored in the Build resource's
     * results field.
     * If any of the images fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>repeated string images = 1;</code>
     * @param value The bytes of the images to add.
     * @return This builder for chaining.
     */
    public Builder addImagesBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addImagesBytes(value);
      return this;
    }

    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    @java.lang.Override
    public boolean hasObjects() {
      return instance.hasObjects();
    }
    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    @java.lang.Override
    public google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects getObjects() {
      return instance.getObjects();
    }
    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    public Builder setObjects(google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects value) {
      copyOnWrite();
      instance.setObjects(value);
      return this;
      }
    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    public Builder setObjects(
        google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects.Builder builderForValue) {
      copyOnWrite();
      instance.setObjects(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    public Builder mergeObjects(google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects value) {
      copyOnWrite();
      instance.mergeObjects(value);
      return this;
    }
    /**
     * <pre>
     * A list of objects to be uploaded to Cloud Storage upon successful
     * completion of all build steps.
     * Files in the workspace matching specified paths globs will be uploaded to
     * the specified Cloud Storage location using the builder service account's
     * credentials.
     * The location and generation of the uploaded objects will be stored in the
     * Build resource's results field.
     * If any objects fail to be pushed, the build is marked FAILURE.
     * </pre>
     *
     * <code>.google.events.cloud.cloudbuild.v1.Artifacts.ArtifactObjects objects = 2;</code>
     */
    public Builder clearObjects() {  copyOnWrite();
      instance.clearObjects();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.events.cloud.cloudbuild.v1.Artifacts)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new google.events.cloud.cloudbuild.v1.Artifacts();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "images_",
            "objects_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u021a\u0002\t" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<google.events.cloud.cloudbuild.v1.Artifacts> parser = PARSER;
        if (parser == null) {
          synchronized (google.events.cloud.cloudbuild.v1.Artifacts.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<google.events.cloud.cloudbuild.v1.Artifacts>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.events.cloud.cloudbuild.v1.Artifacts)
  private static final google.events.cloud.cloudbuild.v1.Artifacts DEFAULT_INSTANCE;
  static {
    Artifacts defaultInstance = new Artifacts();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Artifacts.class, defaultInstance);
  }

  public static google.events.cloud.cloudbuild.v1.Artifacts getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Artifacts> PARSER;

  public static com.google.protobuf.Parser<Artifacts> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

